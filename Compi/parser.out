Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> function_def
Rule 5     statement -> var_decl SEMICOLON
Rule 6     statement -> assignment SEMICOLON
Rule 7     statement -> if_stmt
Rule 8     statement -> for_stmt
Rule 9     statement -> return_stmt SEMICOLON
Rule 10    statement -> expression_stmt SEMICOLON
Rule 11    statement -> block
Rule 12    function_def -> INT IDENTIFIER LPAREN param_list RPAREN block
Rule 13    function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block
Rule 14    function_def -> INT IDENTIFIER LPAREN RPAREN block
Rule 15    function_def -> VOID IDENTIFIER LPAREN RPAREN block
Rule 16    param_list -> param_list COMMA param
Rule 17    param_list -> param
Rule 18    param_list -> empty
Rule 19    param -> INT IDENTIFIER
Rule 20    var_decl -> INT IDENTIFIER
Rule 21    var_decl -> INT IDENTIFIER ASSIGN expression
Rule 22    assignment -> IDENTIFIER ASSIGN expression
Rule 23    if_stmt -> IF LPAREN expression RPAREN statement
Rule 24    if_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 25    for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
Rule 26    return_stmt -> RETURN
Rule 27    return_stmt -> RETURN expression
Rule 28    expression_stmt -> expression
Rule 29    block -> LBRACE statement_list RBRACE
Rule 30    block -> LBRACE RBRACE
Rule 31    expression -> expression PLUS expression
Rule 32    expression -> expression MINUS expression
Rule 33    expression -> expression TIMES expression
Rule 34    expression -> expression DIVIDE expression
Rule 35    expression -> expression EQ expression
Rule 36    expression -> expression NE expression
Rule 37    expression -> expression LT expression
Rule 38    expression -> expression GT expression
Rule 39    expression -> expression AND expression
Rule 40    expression -> expression OR expression
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    expression -> IDENTIFIER
Rule 43    expression -> NUMBER
Rule 44    empty -> <empty>

Terminals, with rules where they appear

AND                  : 39
ASSIGN               : 21 22
COMMA                : 16
DIVIDE               : 34
ELSE                 : 24
EQ                   : 35
FOR                  : 25
GT                   : 38
IDENTIFIER           : 12 13 14 15 19 20 21 22 42
IF                   : 23 24
INT                  : 12 14 19 20 21
LBRACE               : 29 30
LPAREN               : 12 13 14 15 23 24 25 41
LT                   : 37
MINUS                : 32
NE                   : 36
NUMBER               : 43
OR                   : 40
PLUS                 : 31
RBRACE               : 29 30
RETURN               : 26 27
RPAREN               : 12 13 14 15 23 24 25 41
SEMICOLON            : 5 6 9 10 25 25
TIMES                : 33
VOID                 : 13 15
error                : 

Nonterminals, with rules where they appear

assignment           : 6 25 25
block                : 11 12 13 14 15
empty                : 18
expression           : 21 22 23 24 25 27 28 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41
expression_stmt      : 10
for_stmt             : 8
function_def         : 4
if_stmt              : 7
param                : 16 17
param_list           : 12 13 16
program              : 0
return_stmt          : 9
statement            : 2 3 23 24 24 25
statement_list       : 1 2 29
var_decl             : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11
    expression                     shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    $end            reduce using rule 1 (program -> statement_list .)
    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    statement                      shift and go to state 22
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11
    expression                     shift and go to state 16

state 3

    (3) statement_list -> statement .

    INT             reduce using rule 3 (statement_list -> statement .)
    VOID            reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> function_def .

    INT             reduce using rule 4 (statement -> function_def .)
    VOID            reduce using rule 4 (statement -> function_def .)
    IDENTIFIER      reduce using rule 4 (statement -> function_def .)
    IF              reduce using rule 4 (statement -> function_def .)
    FOR             reduce using rule 4 (statement -> function_def .)
    RETURN          reduce using rule 4 (statement -> function_def .)
    LBRACE          reduce using rule 4 (statement -> function_def .)
    LPAREN          reduce using rule 4 (statement -> function_def .)
    NUMBER          reduce using rule 4 (statement -> function_def .)
    $end            reduce using rule 4 (statement -> function_def .)
    RBRACE          reduce using rule 4 (statement -> function_def .)
    ELSE            reduce using rule 4 (statement -> function_def .)


state 5

    (5) statement -> var_decl . SEMICOLON

    SEMICOLON       shift and go to state 23


state 6

    (6) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 24


state 7

    (7) statement -> if_stmt .

    INT             reduce using rule 7 (statement -> if_stmt .)
    VOID            reduce using rule 7 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 7 (statement -> if_stmt .)
    IF              reduce using rule 7 (statement -> if_stmt .)
    FOR             reduce using rule 7 (statement -> if_stmt .)
    RETURN          reduce using rule 7 (statement -> if_stmt .)
    LBRACE          reduce using rule 7 (statement -> if_stmt .)
    LPAREN          reduce using rule 7 (statement -> if_stmt .)
    NUMBER          reduce using rule 7 (statement -> if_stmt .)
    $end            reduce using rule 7 (statement -> if_stmt .)
    RBRACE          reduce using rule 7 (statement -> if_stmt .)
    ELSE            reduce using rule 7 (statement -> if_stmt .)


state 8

    (8) statement -> for_stmt .

    INT             reduce using rule 8 (statement -> for_stmt .)
    VOID            reduce using rule 8 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 8 (statement -> for_stmt .)
    IF              reduce using rule 8 (statement -> for_stmt .)
    FOR             reduce using rule 8 (statement -> for_stmt .)
    RETURN          reduce using rule 8 (statement -> for_stmt .)
    LBRACE          reduce using rule 8 (statement -> for_stmt .)
    LPAREN          reduce using rule 8 (statement -> for_stmt .)
    NUMBER          reduce using rule 8 (statement -> for_stmt .)
    $end            reduce using rule 8 (statement -> for_stmt .)
    RBRACE          reduce using rule 8 (statement -> for_stmt .)
    ELSE            reduce using rule 8 (statement -> for_stmt .)


state 9

    (9) statement -> return_stmt . SEMICOLON

    SEMICOLON       shift and go to state 25


state 10

    (10) statement -> expression_stmt . SEMICOLON

    SEMICOLON       shift and go to state 26


state 11

    (11) statement -> block .

    INT             reduce using rule 11 (statement -> block .)
    VOID            reduce using rule 11 (statement -> block .)
    IDENTIFIER      reduce using rule 11 (statement -> block .)
    IF              reduce using rule 11 (statement -> block .)
    FOR             reduce using rule 11 (statement -> block .)
    RETURN          reduce using rule 11 (statement -> block .)
    LBRACE          reduce using rule 11 (statement -> block .)
    LPAREN          reduce using rule 11 (statement -> block .)
    NUMBER          reduce using rule 11 (statement -> block .)
    $end            reduce using rule 11 (statement -> block .)
    RBRACE          reduce using rule 11 (statement -> block .)
    ELSE            reduce using rule 11 (statement -> block .)


state 12

    (12) function_def -> INT . IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> INT . IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> INT . IDENTIFIER
    (21) var_decl -> INT . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 27


state 13

    (22) assignment -> IDENTIFIER . ASSIGN expression
    (42) expression -> IDENTIFIER .

    ASSIGN          shift and go to state 28
    PLUS            reduce using rule 42 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 42 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 42 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (expression -> IDENTIFIER .)
    EQ              reduce using rule 42 (expression -> IDENTIFIER .)
    NE              reduce using rule 42 (expression -> IDENTIFIER .)
    LT              reduce using rule 42 (expression -> IDENTIFIER .)
    GT              reduce using rule 42 (expression -> IDENTIFIER .)
    AND             reduce using rule 42 (expression -> IDENTIFIER .)
    OR              reduce using rule 42 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER .)


state 14

    (41) expression -> LPAREN . expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 29

state 15

    (13) function_def -> VOID . IDENTIFIER LPAREN param_list RPAREN block
    (15) function_def -> VOID . IDENTIFIER LPAREN RPAREN block

    IDENTIFIER      shift and go to state 31


state 16

    (28) expression_stmt -> expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 28 (expression_stmt -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 17

    (23) if_stmt -> IF . LPAREN expression RPAREN statement
    (24) if_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 42


state 18

    (25) for_stmt -> FOR . LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement

    LPAREN          shift and go to state 43


state 19

    (26) return_stmt -> RETURN .
    (27) return_stmt -> RETURN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    SEMICOLON       reduce using rule 26 (return_stmt -> RETURN .)
    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 44

state 20

    (29) block -> LBRACE . statement_list RBRACE
    (30) block -> LBRACE . RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    RBRACE          shift and go to state 46
    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    statement_list                 shift and go to state 45
    statement                      shift and go to state 3
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11
    expression                     shift and go to state 16

state 21

    (43) expression -> NUMBER .

    PLUS            reduce using rule 43 (expression -> NUMBER .)
    MINUS           reduce using rule 43 (expression -> NUMBER .)
    TIMES           reduce using rule 43 (expression -> NUMBER .)
    DIVIDE          reduce using rule 43 (expression -> NUMBER .)
    EQ              reduce using rule 43 (expression -> NUMBER .)
    NE              reduce using rule 43 (expression -> NUMBER .)
    LT              reduce using rule 43 (expression -> NUMBER .)
    GT              reduce using rule 43 (expression -> NUMBER .)
    AND             reduce using rule 43 (expression -> NUMBER .)
    OR              reduce using rule 43 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 43 (expression -> NUMBER .)
    RPAREN          reduce using rule 43 (expression -> NUMBER .)


state 22

    (2) statement_list -> statement_list statement .

    INT             reduce using rule 2 (statement_list -> statement_list statement .)
    VOID            reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 23

    (5) statement -> var_decl SEMICOLON .

    INT             reduce using rule 5 (statement -> var_decl SEMICOLON .)
    VOID            reduce using rule 5 (statement -> var_decl SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (statement -> var_decl SEMICOLON .)
    IF              reduce using rule 5 (statement -> var_decl SEMICOLON .)
    FOR             reduce using rule 5 (statement -> var_decl SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> var_decl SEMICOLON .)
    LBRACE          reduce using rule 5 (statement -> var_decl SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> var_decl SEMICOLON .)
    NUMBER          reduce using rule 5 (statement -> var_decl SEMICOLON .)
    $end            reduce using rule 5 (statement -> var_decl SEMICOLON .)
    RBRACE          reduce using rule 5 (statement -> var_decl SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> var_decl SEMICOLON .)


state 24

    (6) statement -> assignment SEMICOLON .

    INT             reduce using rule 6 (statement -> assignment SEMICOLON .)
    VOID            reduce using rule 6 (statement -> assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 6 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 6 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> assignment SEMICOLON .)
    LBRACE          reduce using rule 6 (statement -> assignment SEMICOLON .)
    LPAREN          reduce using rule 6 (statement -> assignment SEMICOLON .)
    NUMBER          reduce using rule 6 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 6 (statement -> assignment SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> assignment SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> assignment SEMICOLON .)


state 25

    (9) statement -> return_stmt SEMICOLON .

    INT             reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    VOID            reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    IF              reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    FOR             reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    LBRACE          reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    LPAREN          reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    $end            reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    RBRACE          reduce using rule 9 (statement -> return_stmt SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> return_stmt SEMICOLON .)


state 26

    (10) statement -> expression_stmt SEMICOLON .

    INT             reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    VOID            reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    IF              reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    FOR             reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    LBRACE          reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    $end            reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> expression_stmt SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> expression_stmt SEMICOLON .)


state 27

    (12) function_def -> INT IDENTIFIER . LPAREN param_list RPAREN block
    (14) function_def -> INT IDENTIFIER . LPAREN RPAREN block
    (20) var_decl -> INT IDENTIFIER .
    (21) var_decl -> INT IDENTIFIER . ASSIGN expression

    LPAREN          shift and go to state 47
    SEMICOLON       reduce using rule 20 (var_decl -> INT IDENTIFIER .)
    ASSIGN          shift and go to state 48


state 28

    (22) assignment -> IDENTIFIER ASSIGN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 49

state 29

    (41) expression -> LPAREN expression . RPAREN
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    RPAREN          shift and go to state 50
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 30

    (42) expression -> IDENTIFIER .

    RPAREN          reduce using rule 42 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 42 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 42 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 42 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (expression -> IDENTIFIER .)
    EQ              reduce using rule 42 (expression -> IDENTIFIER .)
    NE              reduce using rule 42 (expression -> IDENTIFIER .)
    LT              reduce using rule 42 (expression -> IDENTIFIER .)
    GT              reduce using rule 42 (expression -> IDENTIFIER .)
    AND             reduce using rule 42 (expression -> IDENTIFIER .)
    OR              reduce using rule 42 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER .)


state 31

    (13) function_def -> VOID IDENTIFIER . LPAREN param_list RPAREN block
    (15) function_def -> VOID IDENTIFIER . LPAREN RPAREN block

    LPAREN          shift and go to state 51


state 32

    (31) expression -> expression PLUS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 52

state 33

    (32) expression -> expression MINUS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 53

state 34

    (33) expression -> expression TIMES . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 54

state 35

    (34) expression -> expression DIVIDE . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 55

state 36

    (35) expression -> expression EQ . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 56

state 37

    (36) expression -> expression NE . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 57

state 38

    (37) expression -> expression LT . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 58

state 39

    (38) expression -> expression GT . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 59

state 40

    (39) expression -> expression AND . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 60

state 41

    (40) expression -> expression OR . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 61

state 42

    (23) if_stmt -> IF LPAREN . expression RPAREN statement
    (24) if_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 62

state 43

    (25) for_stmt -> FOR LPAREN . assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (22) assignment -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 64

    assignment                     shift and go to state 63

state 44

    (27) return_stmt -> RETURN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 27 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 45

    (29) block -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    RBRACE          shift and go to state 65
    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    statement                      shift and go to state 22
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11
    expression                     shift and go to state 16

state 46

    (30) block -> LBRACE RBRACE .

    INT             reduce using rule 30 (block -> LBRACE RBRACE .)
    VOID            reduce using rule 30 (block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 30 (block -> LBRACE RBRACE .)
    IF              reduce using rule 30 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 30 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 30 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 30 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 30 (block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 30 (block -> LBRACE RBRACE .)
    $end            reduce using rule 30 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 30 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 30 (block -> LBRACE RBRACE .)


state 47

    (12) function_def -> INT IDENTIFIER LPAREN . param_list RPAREN block
    (14) function_def -> INT IDENTIFIER LPAREN . RPAREN block
    (16) param_list -> . param_list COMMA param
    (17) param_list -> . param
    (18) param_list -> . empty
    (19) param -> . INT IDENTIFIER
    (44) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 68
    INT             shift and go to state 66
    COMMA           reduce using rule 44 (empty -> .)

  ! RPAREN          [ reduce using rule 44 (empty -> .) ]

    param_list                     shift and go to state 67
    param                          shift and go to state 69
    empty                          shift and go to state 70

state 48

    (21) var_decl -> INT IDENTIFIER ASSIGN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 71

state 49

    (22) assignment -> IDENTIFIER ASSIGN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 50

    (41) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)


state 51

    (13) function_def -> VOID IDENTIFIER LPAREN . param_list RPAREN block
    (15) function_def -> VOID IDENTIFIER LPAREN . RPAREN block
    (16) param_list -> . param_list COMMA param
    (17) param_list -> . param
    (18) param_list -> . empty
    (19) param -> . INT IDENTIFIER
    (44) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 73
    INT             shift and go to state 66
    COMMA           reduce using rule 44 (empty -> .)

  ! RPAREN          [ reduce using rule 44 (empty -> .) ]

    param_list                     shift and go to state 72
    param                          shift and go to state 69
    empty                          shift and go to state 70

state 52

    (31) expression -> expression PLUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 31 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 31 (expression -> expression PLUS expression .)
    EQ              reduce using rule 31 (expression -> expression PLUS expression .)
    NE              reduce using rule 31 (expression -> expression PLUS expression .)
    LT              reduce using rule 31 (expression -> expression PLUS expression .)
    GT              reduce using rule 31 (expression -> expression PLUS expression .)
    AND             reduce using rule 31 (expression -> expression PLUS expression .)
    OR              reduce using rule 31 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 31 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35

  ! TIMES           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 53

    (32) expression -> expression MINUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 32 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 32 (expression -> expression MINUS expression .)
    EQ              reduce using rule 32 (expression -> expression MINUS expression .)
    NE              reduce using rule 32 (expression -> expression MINUS expression .)
    LT              reduce using rule 32 (expression -> expression MINUS expression .)
    GT              reduce using rule 32 (expression -> expression MINUS expression .)
    AND             reduce using rule 32 (expression -> expression MINUS expression .)
    OR              reduce using rule 32 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 32 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35

  ! TIMES           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 54

    (33) expression -> expression TIMES expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 33 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 33 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 33 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 33 (expression -> expression TIMES expression .)
    EQ              reduce using rule 33 (expression -> expression TIMES expression .)
    NE              reduce using rule 33 (expression -> expression TIMES expression .)
    LT              reduce using rule 33 (expression -> expression TIMES expression .)
    GT              reduce using rule 33 (expression -> expression TIMES expression .)
    AND             reduce using rule 33 (expression -> expression TIMES expression .)
    OR              reduce using rule 33 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 33 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 55

    (34) expression -> expression DIVIDE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 34 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 34 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 34 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 34 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 34 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 34 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 34 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 34 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 34 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 34 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 34 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 56

    (35) expression -> expression EQ expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    EQ              reduce using rule 35 (expression -> expression EQ expression .)
    NE              reduce using rule 35 (expression -> expression EQ expression .)
    AND             reduce using rule 35 (expression -> expression EQ expression .)
    OR              reduce using rule 35 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 35 (expression -> expression EQ expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    LT              shift and go to state 38
    GT              shift and go to state 39

  ! PLUS            [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 57

    (36) expression -> expression NE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    EQ              reduce using rule 36 (expression -> expression NE expression .)
    NE              reduce using rule 36 (expression -> expression NE expression .)
    AND             reduce using rule 36 (expression -> expression NE expression .)
    OR              reduce using rule 36 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression NE expression .)
    RPAREN          reduce using rule 36 (expression -> expression NE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    LT              shift and go to state 38
    GT              shift and go to state 39

  ! PLUS            [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 58

    (37) expression -> expression LT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    EQ              reduce using rule 37 (expression -> expression LT expression .)
    NE              reduce using rule 37 (expression -> expression LT expression .)
    LT              reduce using rule 37 (expression -> expression LT expression .)
    GT              reduce using rule 37 (expression -> expression LT expression .)
    AND             reduce using rule 37 (expression -> expression LT expression .)
    OR              reduce using rule 37 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression LT expression .)
    RPAREN          reduce using rule 37 (expression -> expression LT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35

  ! PLUS            [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 59

    (38) expression -> expression GT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    EQ              reduce using rule 38 (expression -> expression GT expression .)
    NE              reduce using rule 38 (expression -> expression GT expression .)
    LT              reduce using rule 38 (expression -> expression GT expression .)
    GT              reduce using rule 38 (expression -> expression GT expression .)
    AND             reduce using rule 38 (expression -> expression GT expression .)
    OR              reduce using rule 38 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression GT expression .)
    RPAREN          reduce using rule 38 (expression -> expression GT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35

  ! PLUS            [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NE              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 60

    (39) expression -> expression AND expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    AND             reduce using rule 39 (expression -> expression AND expression .)
    OR              reduce using rule 39 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression AND expression .)
    RPAREN          reduce using rule 39 (expression -> expression AND expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39

  ! PLUS            [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 61

    (40) expression -> expression OR expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    OR              reduce using rule 40 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression OR expression .)
    RPAREN          reduce using rule 40 (expression -> expression OR expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40

  ! PLUS            [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 41 ]


state 62

    (23) if_stmt -> IF LPAREN expression . RPAREN statement
    (24) if_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 63

    (25) for_stmt -> FOR LPAREN assignment . SEMICOLON expression SEMICOLON assignment RPAREN statement

    SEMICOLON       shift and go to state 75


state 64

    (22) assignment -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 28


state 65

    (29) block -> LBRACE statement_list RBRACE .

    INT             reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 29 (block -> LBRACE statement_list RBRACE .)


state 66

    (19) param -> INT . IDENTIFIER

    IDENTIFIER      shift and go to state 76


state 67

    (12) function_def -> INT IDENTIFIER LPAREN param_list . RPAREN block
    (16) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 77
    COMMA           shift and go to state 78


state 68

    (14) function_def -> INT IDENTIFIER LPAREN RPAREN . block
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 20

    block                          shift and go to state 79

state 69

    (17) param_list -> param .

    RPAREN          reduce using rule 17 (param_list -> param .)
    COMMA           reduce using rule 17 (param_list -> param .)


state 70

    (18) param_list -> empty .

    RPAREN          reduce using rule 18 (param_list -> empty .)
    COMMA           reduce using rule 18 (param_list -> empty .)


state 71

    (21) var_decl -> INT IDENTIFIER ASSIGN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 21 (var_decl -> INT IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 72

    (13) function_def -> VOID IDENTIFIER LPAREN param_list . RPAREN block
    (16) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 80
    COMMA           shift and go to state 78


state 73

    (15) function_def -> VOID IDENTIFIER LPAREN RPAREN . block
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 20

    block                          shift and go to state 81

state 74

    (23) if_stmt -> IF LPAREN expression RPAREN . statement
    (24) if_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    expression                     shift and go to state 16
    statement                      shift and go to state 82
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11

state 75

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON . expression SEMICOLON assignment RPAREN statement
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 21

    expression                     shift and go to state 83

state 76

    (19) param -> INT IDENTIFIER .

    RPAREN          reduce using rule 19 (param -> INT IDENTIFIER .)
    COMMA           reduce using rule 19 (param -> INT IDENTIFIER .)


state 77

    (12) function_def -> INT IDENTIFIER LPAREN param_list RPAREN . block
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 20

    block                          shift and go to state 84

state 78

    (16) param_list -> param_list COMMA . param
    (19) param -> . INT IDENTIFIER

    INT             shift and go to state 66

    param                          shift and go to state 85

state 79

    (14) function_def -> INT IDENTIFIER LPAREN RPAREN block .

    INT             reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    VOID            reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    IDENTIFIER      reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    IF              reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    FOR             reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    RETURN          reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    LBRACE          reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    LPAREN          reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    NUMBER          reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    $end            reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    RBRACE          reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)
    ELSE            reduce using rule 14 (function_def -> INT IDENTIFIER LPAREN RPAREN block .)


state 80

    (13) function_def -> VOID IDENTIFIER LPAREN param_list RPAREN . block
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 20

    block                          shift and go to state 86

state 81

    (15) function_def -> VOID IDENTIFIER LPAREN RPAREN block .

    INT             reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    VOID            reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    IDENTIFIER      reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    IF              reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    FOR             reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    RETURN          reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    LBRACE          reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    LPAREN          reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    NUMBER          reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    $end            reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    RBRACE          reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)
    ELSE            reduce using rule 15 (function_def -> VOID IDENTIFIER LPAREN RPAREN block .)


state 82

    (23) if_stmt -> IF LPAREN expression RPAREN statement .
    (24) if_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    INT             reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 87

  ! ELSE            [ reduce using rule 23 (if_stmt -> IF LPAREN expression RPAREN statement .) ]


state 83

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON expression . SEMICOLON assignment RPAREN statement
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       shift and go to state 88
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQ              shift and go to state 36
    NE              shift and go to state 37
    LT              shift and go to state 38
    GT              shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41


state 84

    (12) function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .

    INT             reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    VOID            reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    IDENTIFIER      reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    IF              reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    FOR             reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    RETURN          reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    LBRACE          reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    LPAREN          reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    NUMBER          reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    $end            reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    RBRACE          reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)
    ELSE            reduce using rule 12 (function_def -> INT IDENTIFIER LPAREN param_list RPAREN block .)


state 85

    (16) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 16 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 16 (param_list -> param_list COMMA param .)


state 86

    (13) function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .

    INT             reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    VOID            reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    IDENTIFIER      reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    IF              reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    FOR             reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    RETURN          reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    LBRACE          reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    LPAREN          reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    NUMBER          reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    $end            reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    RBRACE          reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)
    ELSE            reduce using rule 13 (function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block .)


state 87

    (24) if_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    expression                     shift and go to state 16
    statement                      shift and go to state 89
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    assignment                     shift and go to state 6
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11

state 88

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON . assignment RPAREN statement
    (22) assignment -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 64

    assignment                     shift and go to state 90

state 89

    (24) if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    INT             reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 24 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 90

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment . RPAREN statement

    RPAREN          shift and go to state 91


state 91

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN . statement
    (4) statement -> . function_def
    (5) statement -> . var_decl SEMICOLON
    (6) statement -> . assignment SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . for_stmt
    (9) statement -> . return_stmt SEMICOLON
    (10) statement -> . expression_stmt SEMICOLON
    (11) statement -> . block
    (12) function_def -> . INT IDENTIFIER LPAREN param_list RPAREN block
    (13) function_def -> . VOID IDENTIFIER LPAREN param_list RPAREN block
    (14) function_def -> . INT IDENTIFIER LPAREN RPAREN block
    (15) function_def -> . VOID IDENTIFIER LPAREN RPAREN block
    (20) var_decl -> . INT IDENTIFIER
    (21) var_decl -> . INT IDENTIFIER ASSIGN expression
    (22) assignment -> . IDENTIFIER ASSIGN expression
    (23) if_stmt -> . IF LPAREN expression RPAREN statement
    (24) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (25) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    (26) return_stmt -> . RETURN
    (27) return_stmt -> . RETURN expression
    (28) expression_stmt -> . expression
    (29) block -> . LBRACE statement_list RBRACE
    (30) block -> . LBRACE RBRACE
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . IDENTIFIER
    (43) expression -> . NUMBER

    INT             shift and go to state 12
    VOID            shift and go to state 15
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    LBRACE          shift and go to state 20
    LPAREN          shift and go to state 14
    NUMBER          shift and go to state 21

    assignment                     shift and go to state 6
    expression                     shift and go to state 16
    statement                      shift and go to state 92
    function_def                   shift and go to state 4
    var_decl                       shift and go to state 5
    if_stmt                        shift and go to state 7
    for_stmt                       shift and go to state 8
    return_stmt                    shift and go to state 9
    expression_stmt                shift and go to state 10
    block                          shift and go to state 11

state 92

    (25) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .

    INT             reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    VOID            reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    IDENTIFIER      reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    IF              reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    FOR             reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    RETURN          reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    LBRACE          reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    LPAREN          reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    NUMBER          reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    $end            reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    RBRACE          reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)
    ELSE            reduce using rule 25 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 82 resolved as shift
