
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTGTleftPLUSMINUSleftTIMESDIVIDEAND ASSIGN COMMA DIVIDE ELSE EQ FOR GT IDENTIFIER IF INT LBRACE LPAREN LT MINUS NE NUMBER OR PLUS RBRACE RETURN RPAREN SEMICOLON TIMES VOIDprogram : statement_liststatement_list : statement_list statement\n                     | statementstatement : function_def\n                | var_decl SEMICOLON\n                | assignment SEMICOLON\n                | if_stmt\n                | for_stmt\n                | return_stmt SEMICOLON\n                | expression_stmt SEMICOLON\n                | blockfunction_def : INT IDENTIFIER LPAREN param_list RPAREN block\n                   | VOID IDENTIFIER LPAREN param_list RPAREN block\n                   | INT IDENTIFIER LPAREN RPAREN block\n                   | VOID IDENTIFIER LPAREN RPAREN blockparam_list : param_list COMMA param\n                 | param\n                 | emptyparam : INT IDENTIFIERvar_decl : INT IDENTIFIER\n               | INT IDENTIFIER ASSIGN expressionassignment : IDENTIFIER ASSIGN expressionif_stmt : IF LPAREN expression RPAREN statement\n              | IF LPAREN expression RPAREN statement ELSE statementfor_stmt : FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statementreturn_stmt : RETURN\n                  | RETURN expressionexpression_stmt : expressionblock : LBRACE statement_list RBRACE\n            | LBRACE RBRACEexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression TIMES expression\n                 | expression DIVIDE expression\n                 | expression EQ expression\n                 | expression NE expression\n                 | expression LT expression\n                 | expression GT expression\n                 | expression AND expression\n                 | expression OR expressionexpression : LPAREN expression RPARENexpression : IDENTIFIERexpression : NUMBERempty :'
    
_lr_action_items = {'INT':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,47,51,65,74,78,79,81,82,84,86,87,89,91,92,],[12,12,-3,-4,-7,-8,-11,12,-2,-5,-6,-9,-10,12,-30,66,66,-29,12,66,-14,-15,-23,-12,-13,12,-24,12,-25,]),'VOID':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,65,74,79,81,82,84,86,87,89,91,92,],[15,15,-3,-4,-7,-8,-11,15,-2,-5,-6,-9,-10,15,-30,-29,15,-14,-15,-23,-12,-13,15,-24,15,-25,]),'IDENTIFIER':([0,2,3,4,7,8,11,12,14,15,19,20,22,23,24,25,26,28,32,33,34,35,36,37,38,39,40,41,42,43,45,46,48,65,66,74,75,79,81,82,84,86,87,88,89,91,92,],[13,13,-3,-4,-7,-8,-11,27,30,31,30,13,-2,-5,-6,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,64,13,-30,30,-29,76,13,30,-14,-15,-23,-12,-13,13,64,-24,13,-25,]),'IF':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,65,74,79,81,82,84,86,87,89,91,92,],[17,17,-3,-4,-7,-8,-11,17,-2,-5,-6,-9,-10,17,-30,-29,17,-14,-15,-23,-12,-13,17,-24,17,-25,]),'FOR':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,65,74,79,81,82,84,86,87,89,91,92,],[18,18,-3,-4,-7,-8,-11,18,-2,-5,-6,-9,-10,18,-30,-29,18,-14,-15,-23,-12,-13,18,-24,18,-25,]),'RETURN':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,65,74,79,81,82,84,86,87,89,91,92,],[19,19,-3,-4,-7,-8,-11,19,-2,-5,-6,-9,-10,19,-30,-29,19,-14,-15,-23,-12,-13,19,-24,19,-25,]),'LBRACE':([0,2,3,4,7,8,11,20,22,23,24,25,26,45,46,65,68,73,74,77,79,80,81,82,84,86,87,89,91,92,],[20,20,-3,-4,-7,-8,-11,20,-2,-5,-6,-9,-10,20,-30,-29,20,20,20,20,-14,20,-15,-23,-12,-13,20,-24,20,-25,]),'LPAREN':([0,2,3,4,7,8,11,14,17,18,19,20,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,45,46,48,65,74,75,79,81,82,84,86,87,89,91,92,],[14,14,-3,-4,-7,-8,-11,14,42,43,14,14,-2,-5,-6,-9,-10,47,14,51,14,14,14,14,14,14,14,14,14,14,14,14,-30,14,-29,14,14,-14,-15,-23,-12,-13,14,-24,14,-25,]),'NUMBER':([0,2,3,4,7,8,11,14,19,20,22,23,24,25,26,28,32,33,34,35,36,37,38,39,40,41,42,45,46,48,65,74,75,79,81,82,84,86,87,89,91,92,],[21,21,-3,-4,-7,-8,-11,21,21,21,-2,-5,-6,-9,-10,21,21,21,21,21,21,21,21,21,21,21,21,21,-30,21,-29,21,21,-14,-15,-23,-12,-13,21,-24,21,-25,]),'$end':([1,2,3,4,7,8,11,22,23,24,25,26,46,65,79,81,82,84,86,89,92,],[0,-1,-3,-4,-7,-8,-11,-2,-5,-6,-9,-10,-30,-29,-14,-15,-23,-12,-13,-24,-25,]),'RBRACE':([3,4,7,8,11,20,22,23,24,25,26,45,46,65,79,81,82,84,86,89,92,],[-3,-4,-7,-8,-11,46,-2,-5,-6,-9,-10,65,-30,-29,-14,-15,-23,-12,-13,-24,-25,]),'ELSE':([4,7,8,11,23,24,25,26,46,65,79,81,82,84,86,89,92,],[-4,-7,-8,-11,-5,-6,-9,-10,-30,-29,-14,-15,87,-12,-13,-24,-25,]),'SEMICOLON':([5,6,9,10,13,16,19,21,27,30,44,49,50,52,53,54,55,56,57,58,59,60,61,63,71,83,],[23,24,25,26,-42,-28,-26,-43,-20,-42,-27,-22,-41,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,75,-21,88,]),'ASSIGN':([13,27,64,],[28,48,28,]),'PLUS':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,32,-43,32,-42,32,32,-41,-31,-32,-33,-34,32,32,32,32,32,32,32,32,32,]),'MINUS':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,33,-43,33,-42,33,33,-41,-31,-32,-33,-34,33,33,33,33,33,33,33,33,33,]),'TIMES':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,34,-43,34,-42,34,34,-41,34,34,-33,-34,34,34,34,34,34,34,34,34,34,]),'DIVIDE':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,35,-43,35,-42,35,35,-41,35,35,-33,-34,35,35,35,35,35,35,35,35,35,]),'EQ':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,36,-43,36,-42,36,36,-41,-31,-32,-33,-34,-35,-36,-37,-38,36,36,36,36,36,]),'NE':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,37,-43,37,-42,37,37,-41,-31,-32,-33,-34,-35,-36,-37,-38,37,37,37,37,37,]),'LT':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,38,-43,38,-42,38,38,-41,-31,-32,-33,-34,38,38,-37,-38,38,38,38,38,38,]),'GT':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,39,-43,39,-42,39,39,-41,-31,-32,-33,-34,39,39,-37,-38,39,39,39,39,39,]),'AND':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,40,-43,40,-42,40,40,-41,-31,-32,-33,-34,-35,-36,-37,-38,-39,40,40,40,40,]),'OR':([13,16,21,29,30,44,49,50,52,53,54,55,56,57,58,59,60,61,62,71,83,],[-42,41,-43,41,-42,41,41,-41,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,41,41,41,]),'RPAREN':([21,29,30,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,70,72,76,85,90,],[-43,50,-42,68,-22,-41,73,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,74,77,-17,-18,80,-19,-16,91,]),'COMMA':([47,51,67,69,70,72,76,85,],[-44,-44,78,-17,-18,78,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,20,],[2,45,]),'statement':([0,2,20,45,74,87,91,],[3,22,3,22,82,89,92,]),'function_def':([0,2,20,45,74,87,91,],[4,4,4,4,4,4,4,]),'var_decl':([0,2,20,45,74,87,91,],[5,5,5,5,5,5,5,]),'assignment':([0,2,20,43,45,74,87,88,91,],[6,6,6,63,6,6,6,90,6,]),'if_stmt':([0,2,20,45,74,87,91,],[7,7,7,7,7,7,7,]),'for_stmt':([0,2,20,45,74,87,91,],[8,8,8,8,8,8,8,]),'return_stmt':([0,2,20,45,74,87,91,],[9,9,9,9,9,9,9,]),'expression_stmt':([0,2,20,45,74,87,91,],[10,10,10,10,10,10,10,]),'block':([0,2,20,45,68,73,74,77,80,87,91,],[11,11,11,11,79,81,11,84,86,11,11,]),'expression':([0,2,14,19,20,28,32,33,34,35,36,37,38,39,40,41,42,45,48,74,75,87,91,],[16,16,29,44,16,49,52,53,54,55,56,57,58,59,60,61,62,16,71,16,83,16,16,]),'param_list':([47,51,],[67,72,]),'param':([47,51,78,],[69,69,85,]),'empty':([47,51,],[70,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',74),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',78),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',79),
  ('statement -> function_def','statement',1,'p_statement','parser.py',86),
  ('statement -> var_decl SEMICOLON','statement',2,'p_statement','parser.py',87),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','parser.py',88),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',89),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> return_stmt SEMICOLON','statement',2,'p_statement','parser.py',91),
  ('statement -> expression_stmt SEMICOLON','statement',2,'p_statement','parser.py',92),
  ('statement -> block','statement',1,'p_statement','parser.py',93),
  ('function_def -> INT IDENTIFIER LPAREN param_list RPAREN block','function_def',6,'p_function_def','parser.py',97),
  ('function_def -> VOID IDENTIFIER LPAREN param_list RPAREN block','function_def',6,'p_function_def','parser.py',98),
  ('function_def -> INT IDENTIFIER LPAREN RPAREN block','function_def',5,'p_function_def','parser.py',99),
  ('function_def -> VOID IDENTIFIER LPAREN RPAREN block','function_def',5,'p_function_def','parser.py',100),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',107),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',108),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',109),
  ('param -> INT IDENTIFIER','param',2,'p_param','parser.py',116),
  ('var_decl -> INT IDENTIFIER','var_decl',2,'p_var_decl','parser.py',120),
  ('var_decl -> INT IDENTIFIER ASSIGN expression','var_decl',4,'p_var_decl','parser.py',121),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','parser.py',128),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',132),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',133),
  ('for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement','for_stmt',9,'p_for_stmt','parser.py',140),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','parser.py',144),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',145),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','parser.py',152),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',156),
  ('block -> LBRACE RBRACE','block',2,'p_block','parser.py',157),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',164),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',165),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',166),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',167),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',168),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',169),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',170),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',171),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',172),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',173),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',177),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',181),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',185),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',189),
]
