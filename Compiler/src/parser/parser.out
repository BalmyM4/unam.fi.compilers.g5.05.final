Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDRESS
    AUTO
    CASE
    CONST
    DEFAULT
    DEREFERENCE
    EXTERN
    FREE
    MALLOC
    PRINTF
    REGISTER
    SCANF
    STATIC
    VOLATILE

Grammar

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> external_declaration
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     external_declaration -> function_definition
Rule 5     external_declaration -> declaration
Rule 6     function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement
Rule 7     function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement
Rule 8     parameter_list -> parameter_declaration
Rule 9     parameter_list -> parameter_list COMMA parameter_declaration
Rule 10    parameter_declaration -> type_specifier IDENTIFIER
Rule 11    parameter_declaration -> type_specifier
Rule 12    type_specifier -> VOID
Rule 13    type_specifier -> CHAR
Rule 14    type_specifier -> SHORT
Rule 15    type_specifier -> INT
Rule 16    type_specifier -> LONG
Rule 17    type_specifier -> FLOAT
Rule 18    type_specifier -> DOUBLE
Rule 19    type_specifier -> SIGNED
Rule 20    type_specifier -> UNSIGNED
Rule 21    type_specifier -> BOOL
Rule 22    type_specifier -> signed_type
Rule 23    type_specifier -> unsigned_type
Rule 24    signed_type -> SIGNED CHAR
Rule 25    signed_type -> SIGNED SHORT
Rule 26    signed_type -> SIGNED INT
Rule 27    signed_type -> SIGNED LONG
Rule 28    unsigned_type -> UNSIGNED CHAR
Rule 29    unsigned_type -> UNSIGNED SHORT
Rule 30    unsigned_type -> UNSIGNED INT
Rule 31    unsigned_type -> UNSIGNED LONG
Rule 32    declaration -> type_specifier init_declarator_list SEMICOLON
Rule 33    init_declarator_list -> init_declarator
Rule 34    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 35    init_declarator -> declarator
Rule 36    init_declarator -> declarator ASSIGN initializer
Rule 37    declarator -> IDENTIFIER
Rule 38    declarator -> TIMES declarator
Rule 39    declarator -> declarator LBRACKET RBRACKET
Rule 40    declarator -> declarator LBRACKET constant_expression RBRACKET
Rule 41    initializer -> assignment_expression
Rule 42    initializer -> LBRACE initializer_list RBRACE
Rule 43    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 44    initializer_list -> initializer
Rule 45    initializer_list -> initializer_list COMMA initializer
Rule 46    statement -> compound_statement
Rule 47    statement -> expression_statement
Rule 48    statement -> selection_statement
Rule 49    statement -> iteration_statement
Rule 50    statement -> jump_statement
Rule 51    statement -> declaration
Rule 52    compound_statement -> LBRACE RBRACE
Rule 53    compound_statement -> LBRACE statement_list RBRACE
Rule 54    statement_list -> statement
Rule 55    statement_list -> statement_list statement
Rule 56    expression_statement -> SEMICOLON
Rule 57    expression_statement -> expression SEMICOLON
Rule 58    selection_statement -> IF LPAREN expression RPAREN statement
Rule 59    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 60    selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 61    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 62    iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 63    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 64    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 65    jump_statement -> BREAK SEMICOLON
Rule 66    jump_statement -> CONTINUE SEMICOLON
Rule 67    jump_statement -> RETURN SEMICOLON
Rule 68    jump_statement -> RETURN expression SEMICOLON
Rule 69    expression -> assignment_expression
Rule 70    expression -> expression COMMA assignment_expression
Rule 71    assignment_expression -> conditional_expression
Rule 72    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 73    assignment_operator -> ASSIGN
Rule 74    assignment_operator -> TIMES_ASSIGN
Rule 75    assignment_operator -> DIVIDE_ASSIGN
Rule 76    assignment_operator -> PLUS_ASSIGN
Rule 77    assignment_operator -> MINUS_ASSIGN
Rule 78    conditional_expression -> logical_or_expression
Rule 79    conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 80    constant_expression -> conditional_expression
Rule 81    logical_or_expression -> logical_and_expression
Rule 82    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 83    logical_and_expression -> bitwise_or_expression
Rule 84    logical_and_expression -> logical_and_expression AND bitwise_or_expression
Rule 85    bitwise_or_expression -> bitwise_xor_expression
Rule 86    bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression
Rule 87    bitwise_xor_expression -> bitwise_and_expression
Rule 88    bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression
Rule 89    bitwise_and_expression -> equality_expression
Rule 90    bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression
Rule 91    equality_expression -> relational_expression
Rule 92    equality_expression -> equality_expression EQ relational_expression
Rule 93    equality_expression -> equality_expression NE relational_expression
Rule 94    relational_expression -> shift_expression
Rule 95    relational_expression -> relational_expression LT shift_expression
Rule 96    relational_expression -> relational_expression GT shift_expression
Rule 97    relational_expression -> relational_expression LE shift_expression
Rule 98    relational_expression -> relational_expression GE shift_expression
Rule 99    shift_expression -> additive_expression
Rule 100   shift_expression -> shift_expression LSHIFT additive_expression
Rule 101   shift_expression -> shift_expression RSHIFT additive_expression
Rule 102   additive_expression -> multiplicative_expression
Rule 103   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 104   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 105   multiplicative_expression -> cast_expression
Rule 106   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 107   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 108   multiplicative_expression -> multiplicative_expression MODULO cast_expression
Rule 109   cast_expression -> unary_expression
Rule 110   cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 111   unary_expression -> postfix_expression
Rule 112   unary_expression -> INCREMENT unary_expression
Rule 113   unary_expression -> DECREMENT unary_expression
Rule 114   unary_expression -> unary_operator cast_expression
Rule 115   unary_expression -> SIZEOF unary_expression
Rule 116   unary_expression -> SIZEOF LPAREN type_specifier RPAREN
Rule 117   unary_operator -> BITWISE_AND
Rule 118   unary_operator -> TIMES
Rule 119   unary_operator -> PLUS
Rule 120   unary_operator -> MINUS
Rule 121   unary_operator -> BITWISE_NOT
Rule 122   unary_operator -> NOT
Rule 123   postfix_expression -> primary_expression
Rule 124   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 125   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 126   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 127   postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 128   postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 129   postfix_expression -> postfix_expression INCREMENT
Rule 130   postfix_expression -> postfix_expression DECREMENT
Rule 131   primary_expression -> IDENTIFIER
Rule 132   primary_expression -> constant
Rule 133   primary_expression -> STRING_LITERAL
Rule 134   primary_expression -> LPAREN expression RPAREN
Rule 135   argument_expression_list -> assignment_expression
Rule 136   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 137   constant -> NUMBER
Rule 138   constant -> FLOAT_NUM
Rule 139   constant -> CHAR_LITERAL

Terminals, with rules where they appear

ADDRESS              : 
AND                  : 84
ARROW                : 128
ASSIGN               : 36 73
AUTO                 : 
BITWISE_AND          : 90 117
BITWISE_NOT          : 121
BITWISE_OR           : 86
BITWISE_XOR          : 88
BOOL                 : 21
BREAK                : 65
CASE                 : 
CHAR                 : 13 24 28
CHAR_LITERAL         : 139
COLON                : 79
COMMA                : 9 34 43 45 70 136
CONST                : 
CONTINUE             : 66
DECREMENT            : 113 130
DEFAULT              : 
DEREFERENCE          : 
DIVIDE               : 107
DIVIDE_ASSIGN        : 75
DO                   : 64
DOT                  : 127
DOUBLE               : 18
ELSE                 : 59
EQ                   : 92
EXTERN               : 
FLOAT                : 17
FLOAT_NUM            : 138
FOR                  : 62 63
FREE                 : 
GE                   : 98
GT                   : 96
IDENTIFIER           : 6 7 10 37 127 128 131
IF                   : 58 59
INCREMENT            : 112 129
INT                  : 15 26 30
LBRACE               : 42 43 52 53
LBRACKET             : 39 40 124
LE                   : 97
LONG                 : 16 27 31
LPAREN               : 6 7 58 59 60 61 62 63 64 110 116 125 126 134
LSHIFT               : 100
LT                   : 95
MALLOC               : 
MINUS                : 104 120
MINUS_ASSIGN         : 77
MODULO               : 108
NE                   : 93
NOT                  : 122
NUMBER               : 137
OR                   : 82
PLUS                 : 103 119
PLUS_ASSIGN          : 76
PRINTF               : 
QUESTION             : 79
RBRACE               : 42 43 52 53
RBRACKET             : 39 40 124
REGISTER             : 
RETURN               : 67 68
RPAREN               : 6 7 58 59 60 61 62 63 64 110 116 125 126 134
RSHIFT               : 101
SCANF                : 
SEMICOLON            : 32 56 57 64 65 66 67 68
SHORT                : 14 25 29
SIGNED               : 19 24 25 26 27
SIZEOF               : 115 116
STATIC               : 
STRING_LITERAL       : 133
SWITCH               : 60
TIMES                : 38 106 118
TIMES_ASSIGN         : 74
UNSIGNED             : 20 28 29 30 31
VOID                 : 12
VOLATILE             : 
WHILE                : 61 64
error                : 

Nonterminals, with rules where they appear

additive_expression  : 99 100 101 103 104
argument_expression_list : 126 136
assignment_expression : 41 69 70 72 135 136
assignment_operator  : 72
bitwise_and_expression : 87 88 90
bitwise_or_expression : 83 84 86
bitwise_xor_expression : 85 86 88
cast_expression      : 105 106 107 108 110 114
compound_statement   : 6 7 46
conditional_expression : 71 79 80
constant             : 132
constant_expression  : 40
declaration          : 5 51
declarator           : 35 36 38 39 40
equality_expression  : 89 90 92 93
expression           : 57 58 59 60 61 63 64 68 70 79 124 134
expression_statement : 47 62 62 63 63
external_declaration : 2 3
function_definition  : 4
init_declarator      : 33 34
init_declarator_list : 32 34
initializer          : 36 44 45
initializer_list     : 42 43 45
iteration_statement  : 49
jump_statement       : 50
logical_and_expression : 81 82 84
logical_or_expression : 78 79 82
multiplicative_expression : 102 103 104 106 107 108
parameter_declaration : 8 9
parameter_list       : 6 9
postfix_expression   : 111 124 125 126 127 128 129 130
primary_expression   : 123
program              : 0
relational_expression : 91 92 93 95 96 97 98
selection_statement  : 48
shift_expression     : 94 95 96 97 98 100 101
signed_type          : 22
statement            : 54 55 58 59 59 60 61 62 63 64
statement_list       : 53 55
translation_unit     : 1 3
type_specifier       : 6 7 10 11 32 110 116
unary_expression     : 72 109 112 113 115
unary_operator       : 114
unsigned_type        : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . external_declaration
    (3) translation_unit -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement
    (7) function_definition -> . type_specifier IDENTIFIER LPAREN RPAREN compound_statement
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement
    (7) function_definition -> . type_specifier IDENTIFIER LPAREN RPAREN compound_statement
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG

    $end            reduce using rule 1 (program -> translation_unit .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16

    external_declaration           shift and go to state 19
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18

state 3

    (2) translation_unit -> external_declaration .

    VOID            reduce using rule 2 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> external_declaration .)
    INT             reduce using rule 2 (translation_unit -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> external_declaration .)
    $end            reduce using rule 2 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> function_definition .

    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    SHORT           reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 4 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 4 (external_declaration -> function_definition .)
    BOOL            reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 5

    (5) external_declaration -> declaration .

    VOID            reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    SHORT           reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    SIGNED          reduce using rule 5 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 5 (external_declaration -> declaration .)
    BOOL            reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 6

    (6) function_definition -> type_specifier . IDENTIFIER LPAREN parameter_list RPAREN compound_statement
    (7) function_definition -> type_specifier . IDENTIFIER LPAREN RPAREN compound_statement
    (32) declaration -> type_specifier . init_declarator_list SEMICOLON
    (33) init_declarator_list -> . init_declarator
    (34) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (35) init_declarator -> . declarator
    (36) init_declarator -> . declarator ASSIGN initializer
    (37) declarator -> . IDENTIFIER
    (38) declarator -> . TIMES declarator
    (39) declarator -> . declarator LBRACKET RBRACKET
    (40) declarator -> . declarator LBRACKET constant_expression RBRACKET

    IDENTIFIER      shift and go to state 20
    TIMES           shift and go to state 24

    init_declarator_list           shift and go to state 21
    init_declarator                shift and go to state 22
    declarator                     shift and go to state 23

state 7

    (12) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 12 (type_specifier -> VOID .)
    TIMES           reduce using rule 12 (type_specifier -> VOID .)
    RPAREN          reduce using rule 12 (type_specifier -> VOID .)
    COMMA           reduce using rule 12 (type_specifier -> VOID .)


state 8

    (13) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 13 (type_specifier -> CHAR .)
    TIMES           reduce using rule 13 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 13 (type_specifier -> CHAR .)
    COMMA           reduce using rule 13 (type_specifier -> CHAR .)


state 9

    (14) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 14 (type_specifier -> SHORT .)
    TIMES           reduce using rule 14 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 14 (type_specifier -> SHORT .)
    COMMA           reduce using rule 14 (type_specifier -> SHORT .)


state 10

    (15) type_specifier -> INT .

    IDENTIFIER      reduce using rule 15 (type_specifier -> INT .)
    TIMES           reduce using rule 15 (type_specifier -> INT .)
    RPAREN          reduce using rule 15 (type_specifier -> INT .)
    COMMA           reduce using rule 15 (type_specifier -> INT .)


state 11

    (16) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 16 (type_specifier -> LONG .)
    TIMES           reduce using rule 16 (type_specifier -> LONG .)
    RPAREN          reduce using rule 16 (type_specifier -> LONG .)
    COMMA           reduce using rule 16 (type_specifier -> LONG .)


state 12

    (17) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 17 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 17 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 17 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 17 (type_specifier -> FLOAT .)


state 13

    (18) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 18 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 18 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 18 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 18 (type_specifier -> DOUBLE .)


state 14

    (19) type_specifier -> SIGNED .
    (24) signed_type -> SIGNED . CHAR
    (25) signed_type -> SIGNED . SHORT
    (26) signed_type -> SIGNED . INT
    (27) signed_type -> SIGNED . LONG

    IDENTIFIER      reduce using rule 19 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 19 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 19 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 19 (type_specifier -> SIGNED .)
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28


state 15

    (20) type_specifier -> UNSIGNED .
    (28) unsigned_type -> UNSIGNED . CHAR
    (29) unsigned_type -> UNSIGNED . SHORT
    (30) unsigned_type -> UNSIGNED . INT
    (31) unsigned_type -> UNSIGNED . LONG

    IDENTIFIER      reduce using rule 20 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 20 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 20 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 20 (type_specifier -> UNSIGNED .)
    CHAR            shift and go to state 29
    SHORT           shift and go to state 30
    INT             shift and go to state 31
    LONG            shift and go to state 32


state 16

    (21) type_specifier -> BOOL .

    IDENTIFIER      reduce using rule 21 (type_specifier -> BOOL .)
    TIMES           reduce using rule 21 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 21 (type_specifier -> BOOL .)
    COMMA           reduce using rule 21 (type_specifier -> BOOL .)


state 17

    (22) type_specifier -> signed_type .

    IDENTIFIER      reduce using rule 22 (type_specifier -> signed_type .)
    TIMES           reduce using rule 22 (type_specifier -> signed_type .)
    RPAREN          reduce using rule 22 (type_specifier -> signed_type .)
    COMMA           reduce using rule 22 (type_specifier -> signed_type .)


state 18

    (23) type_specifier -> unsigned_type .

    IDENTIFIER      reduce using rule 23 (type_specifier -> unsigned_type .)
    TIMES           reduce using rule 23 (type_specifier -> unsigned_type .)
    RPAREN          reduce using rule 23 (type_specifier -> unsigned_type .)
    COMMA           reduce using rule 23 (type_specifier -> unsigned_type .)


state 19

    (3) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 20

    (6) function_definition -> type_specifier IDENTIFIER . LPAREN parameter_list RPAREN compound_statement
    (7) function_definition -> type_specifier IDENTIFIER . LPAREN RPAREN compound_statement
    (37) declarator -> IDENTIFIER .

    LPAREN          shift and go to state 33
    ASSIGN          reduce using rule 37 (declarator -> IDENTIFIER .)
    LBRACKET        reduce using rule 37 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 37 (declarator -> IDENTIFIER .)
    COMMA           reduce using rule 37 (declarator -> IDENTIFIER .)


state 21

    (32) declaration -> type_specifier init_declarator_list . SEMICOLON
    (34) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 34
    COMMA           shift and go to state 35


state 22

    (33) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 33 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 33 (init_declarator_list -> init_declarator .)


state 23

    (35) init_declarator -> declarator .
    (36) init_declarator -> declarator . ASSIGN initializer
    (39) declarator -> declarator . LBRACKET RBRACKET
    (40) declarator -> declarator . LBRACKET constant_expression RBRACKET

    SEMICOLON       reduce using rule 35 (init_declarator -> declarator .)
    COMMA           reduce using rule 35 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 36
    LBRACKET        shift and go to state 37


state 24

    (38) declarator -> TIMES . declarator
    (37) declarator -> . IDENTIFIER
    (38) declarator -> . TIMES declarator
    (39) declarator -> . declarator LBRACKET RBRACKET
    (40) declarator -> . declarator LBRACKET constant_expression RBRACKET

    IDENTIFIER      shift and go to state 39
    TIMES           shift and go to state 24

    declarator                     shift and go to state 38

state 25

    (24) signed_type -> SIGNED CHAR .

    IDENTIFIER      reduce using rule 24 (signed_type -> SIGNED CHAR .)
    TIMES           reduce using rule 24 (signed_type -> SIGNED CHAR .)
    RPAREN          reduce using rule 24 (signed_type -> SIGNED CHAR .)
    COMMA           reduce using rule 24 (signed_type -> SIGNED CHAR .)


state 26

    (25) signed_type -> SIGNED SHORT .

    IDENTIFIER      reduce using rule 25 (signed_type -> SIGNED SHORT .)
    TIMES           reduce using rule 25 (signed_type -> SIGNED SHORT .)
    RPAREN          reduce using rule 25 (signed_type -> SIGNED SHORT .)
    COMMA           reduce using rule 25 (signed_type -> SIGNED SHORT .)


state 27

    (26) signed_type -> SIGNED INT .

    IDENTIFIER      reduce using rule 26 (signed_type -> SIGNED INT .)
    TIMES           reduce using rule 26 (signed_type -> SIGNED INT .)
    RPAREN          reduce using rule 26 (signed_type -> SIGNED INT .)
    COMMA           reduce using rule 26 (signed_type -> SIGNED INT .)


state 28

    (27) signed_type -> SIGNED LONG .

    IDENTIFIER      reduce using rule 27 (signed_type -> SIGNED LONG .)
    TIMES           reduce using rule 27 (signed_type -> SIGNED LONG .)
    RPAREN          reduce using rule 27 (signed_type -> SIGNED LONG .)
    COMMA           reduce using rule 27 (signed_type -> SIGNED LONG .)


state 29

    (28) unsigned_type -> UNSIGNED CHAR .

    IDENTIFIER      reduce using rule 28 (unsigned_type -> UNSIGNED CHAR .)
    TIMES           reduce using rule 28 (unsigned_type -> UNSIGNED CHAR .)
    RPAREN          reduce using rule 28 (unsigned_type -> UNSIGNED CHAR .)
    COMMA           reduce using rule 28 (unsigned_type -> UNSIGNED CHAR .)


state 30

    (29) unsigned_type -> UNSIGNED SHORT .

    IDENTIFIER      reduce using rule 29 (unsigned_type -> UNSIGNED SHORT .)
    TIMES           reduce using rule 29 (unsigned_type -> UNSIGNED SHORT .)
    RPAREN          reduce using rule 29 (unsigned_type -> UNSIGNED SHORT .)
    COMMA           reduce using rule 29 (unsigned_type -> UNSIGNED SHORT .)


state 31

    (30) unsigned_type -> UNSIGNED INT .

    IDENTIFIER      reduce using rule 30 (unsigned_type -> UNSIGNED INT .)
    TIMES           reduce using rule 30 (unsigned_type -> UNSIGNED INT .)
    RPAREN          reduce using rule 30 (unsigned_type -> UNSIGNED INT .)
    COMMA           reduce using rule 30 (unsigned_type -> UNSIGNED INT .)


state 32

    (31) unsigned_type -> UNSIGNED LONG .

    IDENTIFIER      reduce using rule 31 (unsigned_type -> UNSIGNED LONG .)
    TIMES           reduce using rule 31 (unsigned_type -> UNSIGNED LONG .)
    RPAREN          reduce using rule 31 (unsigned_type -> UNSIGNED LONG .)
    COMMA           reduce using rule 31 (unsigned_type -> UNSIGNED LONG .)


state 33

    (6) function_definition -> type_specifier IDENTIFIER LPAREN . parameter_list RPAREN compound_statement
    (7) function_definition -> type_specifier IDENTIFIER LPAREN . RPAREN compound_statement
    (8) parameter_list -> . parameter_declaration
    (9) parameter_list -> . parameter_list COMMA parameter_declaration
    (10) parameter_declaration -> . type_specifier IDENTIFIER
    (11) parameter_declaration -> . type_specifier
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG

    RPAREN          shift and go to state 42
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16

    type_specifier                 shift and go to state 40
    parameter_list                 shift and go to state 41
    parameter_declaration          shift and go to state 43
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18

state 34

    (32) declaration -> type_specifier init_declarator_list SEMICOLON .

    VOID            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    INT             reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    LONG            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    $end            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    LBRACE          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    IF              reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    FOR             reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    DO              reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    INCREMENT       reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    DECREMENT       reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    BITWISE_AND     reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    BITWISE_NOT     reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    NOT             reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    NUMBER          reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    FLOAT_NUM       reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    CHAR_LITERAL    reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)
    ELSE            reduce using rule 32 (declaration -> type_specifier init_declarator_list SEMICOLON .)


state 35

    (34) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (35) init_declarator -> . declarator
    (36) init_declarator -> . declarator ASSIGN initializer
    (37) declarator -> . IDENTIFIER
    (38) declarator -> . TIMES declarator
    (39) declarator -> . declarator LBRACKET RBRACKET
    (40) declarator -> . declarator LBRACKET constant_expression RBRACKET

    IDENTIFIER      shift and go to state 39
    TIMES           shift and go to state 24

    init_declarator                shift and go to state 44
    declarator                     shift and go to state 23

state 36

    (36) init_declarator -> declarator ASSIGN . initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 47
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    initializer                    shift and go to state 45
    assignment_expression          shift and go to state 46
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 37

    (39) declarator -> declarator LBRACKET . RBRACKET
    (40) declarator -> declarator LBRACKET . constant_expression RBRACKET
    (80) constant_expression -> . conditional_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    RBRACKET        shift and go to state 80
    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    constant_expression            shift and go to state 81
    conditional_expression         shift and go to state 82
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 58
    bitwise_or_expression          shift and go to state 67
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 38

    (38) declarator -> TIMES declarator .
    (39) declarator -> declarator . LBRACKET RBRACKET
    (40) declarator -> declarator . LBRACKET constant_expression RBRACKET

    ASSIGN          reduce using rule 38 (declarator -> TIMES declarator .)
    SEMICOLON       reduce using rule 38 (declarator -> TIMES declarator .)
    COMMA           reduce using rule 38 (declarator -> TIMES declarator .)
    LBRACKET        shift and go to state 37

  ! LBRACKET        [ reduce using rule 38 (declarator -> TIMES declarator .) ]


state 39

    (37) declarator -> IDENTIFIER .

    LBRACKET        reduce using rule 37 (declarator -> IDENTIFIER .)
    ASSIGN          reduce using rule 37 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 37 (declarator -> IDENTIFIER .)
    COMMA           reduce using rule 37 (declarator -> IDENTIFIER .)


state 40

    (10) parameter_declaration -> type_specifier . IDENTIFIER
    (11) parameter_declaration -> type_specifier .

    IDENTIFIER      shift and go to state 85
    RPAREN          reduce using rule 11 (parameter_declaration -> type_specifier .)
    COMMA           reduce using rule 11 (parameter_declaration -> type_specifier .)


state 41

    (6) function_definition -> type_specifier IDENTIFIER LPAREN parameter_list . RPAREN compound_statement
    (9) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 86
    COMMA           shift and go to state 87


state 42

    (7) function_definition -> type_specifier IDENTIFIER LPAREN RPAREN . compound_statement
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 89

    compound_statement             shift and go to state 88

state 43

    (8) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 8 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 8 (parameter_list -> parameter_declaration .)


state 44

    (34) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 34 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 34 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 45

    (36) init_declarator -> declarator ASSIGN initializer .

    SEMICOLON       reduce using rule 36 (init_declarator -> declarator ASSIGN initializer .)
    COMMA           reduce using rule 36 (init_declarator -> declarator ASSIGN initializer .)


state 46

    (41) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 41 (initializer -> assignment_expression .)
    COMMA           reduce using rule 41 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 41 (initializer -> assignment_expression .)


state 47

    (42) initializer -> LBRACE . initializer_list RBRACE
    (43) initializer -> LBRACE . initializer_list COMMA RBRACE
    (44) initializer_list -> . initializer
    (45) initializer_list -> . initializer_list COMMA initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 47
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    initializer_list               shift and go to state 90
    initializer                    shift and go to state 91
    assignment_expression          shift and go to state 46
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 48

    (71) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 71 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 71 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 71 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 71 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 71 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 71 (assignment_expression -> conditional_expression .)


state 49

    (72) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (109) cast_expression -> unary_expression .
    (73) assignment_operator -> . ASSIGN
    (74) assignment_operator -> . TIMES_ASSIGN
    (75) assignment_operator -> . DIVIDE_ASSIGN
    (76) assignment_operator -> . PLUS_ASSIGN
    (77) assignment_operator -> . MINUS_ASSIGN

    TIMES           reduce using rule 109 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 109 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 109 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 109 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 109 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    LT              reduce using rule 109 (cast_expression -> unary_expression .)
    GT              reduce using rule 109 (cast_expression -> unary_expression .)
    LE              reduce using rule 109 (cast_expression -> unary_expression .)
    GE              reduce using rule 109 (cast_expression -> unary_expression .)
    EQ              reduce using rule 109 (cast_expression -> unary_expression .)
    NE              reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 109 (cast_expression -> unary_expression .)
    AND             reduce using rule 109 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 109 (cast_expression -> unary_expression .)
    OR              reduce using rule 109 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 109 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 109 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 109 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 109 (cast_expression -> unary_expression .)
    COLON           reduce using rule 109 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 109 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 93
    TIMES_ASSIGN    shift and go to state 94
    DIVIDE_ASSIGN   shift and go to state 95
    PLUS_ASSIGN     shift and go to state 96
    MINUS_ASSIGN    shift and go to state 97

    assignment_operator            shift and go to state 92

state 50

    (78) conditional_expression -> logical_or_expression .
    (79) conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression
    (82) logical_or_expression -> logical_or_expression . OR logical_and_expression

    SEMICOLON       reduce using rule 78 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 78 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 78 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 78 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 78 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 78 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 98
    OR              shift and go to state 99


state 51

    (111) unary_expression -> postfix_expression .
    (124) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (125) postfix_expression -> postfix_expression . LPAREN RPAREN
    (126) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (128) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (129) postfix_expression -> postfix_expression . INCREMENT
    (130) postfix_expression -> postfix_expression . DECREMENT

    ASSIGN          reduce using rule 111 (unary_expression -> postfix_expression .)
    TIMES_ASSIGN    reduce using rule 111 (unary_expression -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 111 (unary_expression -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 111 (unary_expression -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 111 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 111 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 111 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 111 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 111 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 111 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 111 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 111 (unary_expression -> postfix_expression .)
    LT              reduce using rule 111 (unary_expression -> postfix_expression .)
    GT              reduce using rule 111 (unary_expression -> postfix_expression .)
    LE              reduce using rule 111 (unary_expression -> postfix_expression .)
    GE              reduce using rule 111 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 111 (unary_expression -> postfix_expression .)
    NE              reduce using rule 111 (unary_expression -> postfix_expression .)
    BITWISE_AND     reduce using rule 111 (unary_expression -> postfix_expression .)
    BITWISE_XOR     reduce using rule 111 (unary_expression -> postfix_expression .)
    BITWISE_OR      reduce using rule 111 (unary_expression -> postfix_expression .)
    AND             reduce using rule 111 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 111 (unary_expression -> postfix_expression .)
    OR              reduce using rule 111 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 111 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 111 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 111 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 111 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 111 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 111 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 100
    LPAREN          shift and go to state 101
    DOT             shift and go to state 102
    ARROW           shift and go to state 103
    INCREMENT       shift and go to state 104
    DECREMENT       shift and go to state 105


state 52

    (112) unary_expression -> INCREMENT . unary_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 53

    (113) unary_expression -> DECREMENT . unary_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    unary_expression               shift and go to state 108
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 54

    (114) unary_expression -> unary_operator . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 55

    (105) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 105 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    MODULO          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 105 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 105 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    BITWISE_AND     reduce using rule 105 (multiplicative_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 105 (multiplicative_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 105 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 105 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 105 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 105 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 105 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 105 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 105 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 105 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 105 (multiplicative_expression -> cast_expression .)


state 56

    (115) unary_expression -> SIZEOF . unary_expression
    (116) unary_expression -> SIZEOF . LPAREN type_specifier RPAREN
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 111
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 57

    (134) primary_expression -> LPAREN . expression RPAREN
    (110) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 112
    type_specifier                 shift and go to state 113
    cast_expression                shift and go to state 55
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 58

    (81) logical_or_expression -> logical_and_expression .
    (84) logical_and_expression -> logical_and_expression . AND bitwise_or_expression

    QUESTION        reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 81 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 115


state 59

    (123) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 123 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 123 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 123 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 123 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 123 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 123 (postfix_expression -> primary_expression .)
    TIMES_ASSIGN    reduce using rule 123 (postfix_expression -> primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUS_ASSIGN     reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUS_ASSIGN    reduce using rule 123 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 123 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 123 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 123 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    LT              reduce using rule 123 (postfix_expression -> primary_expression .)
    GT              reduce using rule 123 (postfix_expression -> primary_expression .)
    LE              reduce using rule 123 (postfix_expression -> primary_expression .)
    GE              reduce using rule 123 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 123 (postfix_expression -> primary_expression .)
    NE              reduce using rule 123 (postfix_expression -> primary_expression .)
    BITWISE_AND     reduce using rule 123 (postfix_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 123 (postfix_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 123 (postfix_expression -> primary_expression .)
    AND             reduce using rule 123 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 123 (postfix_expression -> primary_expression .)
    OR              reduce using rule 123 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 123 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 123 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 123 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 123 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 123 (postfix_expression -> primary_expression .)


state 60

    (131) primary_expression -> IDENTIFIER .

    LBRACKET        reduce using rule 131 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 131 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 131 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 131 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 131 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 131 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 131 (primary_expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 131 (primary_expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 131 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 131 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 131 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 131 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    NE              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 131 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 131 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 131 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 131 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 131 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 131 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 131 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 131 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 131 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 131 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 131 (primary_expression -> IDENTIFIER .)


state 61

    (117) unary_operator -> BITWISE_AND .

    LPAREN          reduce using rule 117 (unary_operator -> BITWISE_AND .)
    INCREMENT       reduce using rule 117 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 117 (unary_operator -> BITWISE_AND .)
    SIZEOF          reduce using rule 117 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 117 (unary_operator -> BITWISE_AND .)
    TIMES           reduce using rule 117 (unary_operator -> BITWISE_AND .)
    PLUS            reduce using rule 117 (unary_operator -> BITWISE_AND .)
    MINUS           reduce using rule 117 (unary_operator -> BITWISE_AND .)
    BITWISE_NOT     reduce using rule 117 (unary_operator -> BITWISE_AND .)
    NOT             reduce using rule 117 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 117 (unary_operator -> BITWISE_AND .)
    STRING_LITERAL  reduce using rule 117 (unary_operator -> BITWISE_AND .)
    NUMBER          reduce using rule 117 (unary_operator -> BITWISE_AND .)
    FLOAT_NUM       reduce using rule 117 (unary_operator -> BITWISE_AND .)
    CHAR_LITERAL    reduce using rule 117 (unary_operator -> BITWISE_AND .)


state 62

    (118) unary_operator -> TIMES .

    LPAREN          reduce using rule 118 (unary_operator -> TIMES .)
    INCREMENT       reduce using rule 118 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 118 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 118 (unary_operator -> TIMES .)
    BITWISE_AND     reduce using rule 118 (unary_operator -> TIMES .)
    TIMES           reduce using rule 118 (unary_operator -> TIMES .)
    PLUS            reduce using rule 118 (unary_operator -> TIMES .)
    MINUS           reduce using rule 118 (unary_operator -> TIMES .)
    BITWISE_NOT     reduce using rule 118 (unary_operator -> TIMES .)
    NOT             reduce using rule 118 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 118 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 118 (unary_operator -> TIMES .)
    NUMBER          reduce using rule 118 (unary_operator -> TIMES .)
    FLOAT_NUM       reduce using rule 118 (unary_operator -> TIMES .)
    CHAR_LITERAL    reduce using rule 118 (unary_operator -> TIMES .)


state 63

    (119) unary_operator -> PLUS .

    LPAREN          reduce using rule 119 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 119 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 119 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 119 (unary_operator -> PLUS .)
    BITWISE_AND     reduce using rule 119 (unary_operator -> PLUS .)
    TIMES           reduce using rule 119 (unary_operator -> PLUS .)
    PLUS            reduce using rule 119 (unary_operator -> PLUS .)
    MINUS           reduce using rule 119 (unary_operator -> PLUS .)
    BITWISE_NOT     reduce using rule 119 (unary_operator -> PLUS .)
    NOT             reduce using rule 119 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 119 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 119 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 119 (unary_operator -> PLUS .)
    FLOAT_NUM       reduce using rule 119 (unary_operator -> PLUS .)
    CHAR_LITERAL    reduce using rule 119 (unary_operator -> PLUS .)


state 64

    (120) unary_operator -> MINUS .

    LPAREN          reduce using rule 120 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 120 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 120 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 120 (unary_operator -> MINUS .)
    BITWISE_AND     reduce using rule 120 (unary_operator -> MINUS .)
    TIMES           reduce using rule 120 (unary_operator -> MINUS .)
    PLUS            reduce using rule 120 (unary_operator -> MINUS .)
    MINUS           reduce using rule 120 (unary_operator -> MINUS .)
    BITWISE_NOT     reduce using rule 120 (unary_operator -> MINUS .)
    NOT             reduce using rule 120 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 120 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 120 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 120 (unary_operator -> MINUS .)
    FLOAT_NUM       reduce using rule 120 (unary_operator -> MINUS .)
    CHAR_LITERAL    reduce using rule 120 (unary_operator -> MINUS .)


state 65

    (121) unary_operator -> BITWISE_NOT .

    LPAREN          reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    INCREMENT       reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    DECREMENT       reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    SIZEOF          reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    BITWISE_AND     reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    TIMES           reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    PLUS            reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    MINUS           reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    BITWISE_NOT     reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    NOT             reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    IDENTIFIER      reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    STRING_LITERAL  reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    NUMBER          reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    FLOAT_NUM       reduce using rule 121 (unary_operator -> BITWISE_NOT .)
    CHAR_LITERAL    reduce using rule 121 (unary_operator -> BITWISE_NOT .)


state 66

    (122) unary_operator -> NOT .

    LPAREN          reduce using rule 122 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 122 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 122 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 122 (unary_operator -> NOT .)
    BITWISE_AND     reduce using rule 122 (unary_operator -> NOT .)
    TIMES           reduce using rule 122 (unary_operator -> NOT .)
    PLUS            reduce using rule 122 (unary_operator -> NOT .)
    MINUS           reduce using rule 122 (unary_operator -> NOT .)
    BITWISE_NOT     reduce using rule 122 (unary_operator -> NOT .)
    NOT             reduce using rule 122 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 122 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 122 (unary_operator -> NOT .)
    NUMBER          reduce using rule 122 (unary_operator -> NOT .)
    FLOAT_NUM       reduce using rule 122 (unary_operator -> NOT .)
    CHAR_LITERAL    reduce using rule 122 (unary_operator -> NOT .)


state 67

    (83) logical_and_expression -> bitwise_or_expression .
    (86) bitwise_or_expression -> bitwise_or_expression . BITWISE_OR bitwise_xor_expression

    AND             reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    QUESTION        reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    OR              reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    SEMICOLON       reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    COMMA           reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    RBRACKET        reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    RBRACE          reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    RPAREN          reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    COLON           reduce using rule 83 (logical_and_expression -> bitwise_or_expression .)
    BITWISE_OR      shift and go to state 116


state 68

    (132) primary_expression -> constant .

    LBRACKET        reduce using rule 132 (primary_expression -> constant .)
    LPAREN          reduce using rule 132 (primary_expression -> constant .)
    DOT             reduce using rule 132 (primary_expression -> constant .)
    ARROW           reduce using rule 132 (primary_expression -> constant .)
    INCREMENT       reduce using rule 132 (primary_expression -> constant .)
    DECREMENT       reduce using rule 132 (primary_expression -> constant .)
    ASSIGN          reduce using rule 132 (primary_expression -> constant .)
    TIMES_ASSIGN    reduce using rule 132 (primary_expression -> constant .)
    DIVIDE_ASSIGN   reduce using rule 132 (primary_expression -> constant .)
    PLUS_ASSIGN     reduce using rule 132 (primary_expression -> constant .)
    MINUS_ASSIGN    reduce using rule 132 (primary_expression -> constant .)
    TIMES           reduce using rule 132 (primary_expression -> constant .)
    DIVIDE          reduce using rule 132 (primary_expression -> constant .)
    MODULO          reduce using rule 132 (primary_expression -> constant .)
    PLUS            reduce using rule 132 (primary_expression -> constant .)
    MINUS           reduce using rule 132 (primary_expression -> constant .)
    LSHIFT          reduce using rule 132 (primary_expression -> constant .)
    RSHIFT          reduce using rule 132 (primary_expression -> constant .)
    LT              reduce using rule 132 (primary_expression -> constant .)
    GT              reduce using rule 132 (primary_expression -> constant .)
    LE              reduce using rule 132 (primary_expression -> constant .)
    GE              reduce using rule 132 (primary_expression -> constant .)
    EQ              reduce using rule 132 (primary_expression -> constant .)
    NE              reduce using rule 132 (primary_expression -> constant .)
    BITWISE_AND     reduce using rule 132 (primary_expression -> constant .)
    BITWISE_XOR     reduce using rule 132 (primary_expression -> constant .)
    BITWISE_OR      reduce using rule 132 (primary_expression -> constant .)
    AND             reduce using rule 132 (primary_expression -> constant .)
    QUESTION        reduce using rule 132 (primary_expression -> constant .)
    OR              reduce using rule 132 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 132 (primary_expression -> constant .)
    COMMA           reduce using rule 132 (primary_expression -> constant .)
    RBRACKET        reduce using rule 132 (primary_expression -> constant .)
    RBRACE          reduce using rule 132 (primary_expression -> constant .)
    RPAREN          reduce using rule 132 (primary_expression -> constant .)
    COLON           reduce using rule 132 (primary_expression -> constant .)


state 69

    (133) primary_expression -> STRING_LITERAL .

    LBRACKET        reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    DOT             reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    ARROW           reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    INCREMENT       reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    DECREMENT       reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    ASSIGN          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    TIMES_ASSIGN    reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    PLUS_ASSIGN     reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    MINUS_ASSIGN    reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    TIMES           reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    MODULO          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    LSHIFT          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    RSHIFT          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    LE              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    GE              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    NE              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    BITWISE_AND     reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    BITWISE_XOR     reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    BITWISE_OR      reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    QUESTION        reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 133 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 133 (primary_expression -> STRING_LITERAL .)


state 70

    (85) bitwise_or_expression -> bitwise_xor_expression .
    (88) bitwise_xor_expression -> bitwise_xor_expression . BITWISE_XOR bitwise_and_expression

    BITWISE_OR      reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    AND             reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    QUESTION        reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    OR              reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    SEMICOLON       reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    COMMA           reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    RBRACKET        reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    RBRACE          reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    RPAREN          reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    COLON           reduce using rule 85 (bitwise_or_expression -> bitwise_xor_expression .)
    BITWISE_XOR     shift and go to state 117


state 71

    (137) constant -> NUMBER .

    LBRACKET        reduce using rule 137 (constant -> NUMBER .)
    LPAREN          reduce using rule 137 (constant -> NUMBER .)
    DOT             reduce using rule 137 (constant -> NUMBER .)
    ARROW           reduce using rule 137 (constant -> NUMBER .)
    INCREMENT       reduce using rule 137 (constant -> NUMBER .)
    DECREMENT       reduce using rule 137 (constant -> NUMBER .)
    ASSIGN          reduce using rule 137 (constant -> NUMBER .)
    TIMES_ASSIGN    reduce using rule 137 (constant -> NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 137 (constant -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 137 (constant -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 137 (constant -> NUMBER .)
    TIMES           reduce using rule 137 (constant -> NUMBER .)
    DIVIDE          reduce using rule 137 (constant -> NUMBER .)
    MODULO          reduce using rule 137 (constant -> NUMBER .)
    PLUS            reduce using rule 137 (constant -> NUMBER .)
    MINUS           reduce using rule 137 (constant -> NUMBER .)
    LSHIFT          reduce using rule 137 (constant -> NUMBER .)
    RSHIFT          reduce using rule 137 (constant -> NUMBER .)
    LT              reduce using rule 137 (constant -> NUMBER .)
    GT              reduce using rule 137 (constant -> NUMBER .)
    LE              reduce using rule 137 (constant -> NUMBER .)
    GE              reduce using rule 137 (constant -> NUMBER .)
    EQ              reduce using rule 137 (constant -> NUMBER .)
    NE              reduce using rule 137 (constant -> NUMBER .)
    BITWISE_AND     reduce using rule 137 (constant -> NUMBER .)
    BITWISE_XOR     reduce using rule 137 (constant -> NUMBER .)
    BITWISE_OR      reduce using rule 137 (constant -> NUMBER .)
    AND             reduce using rule 137 (constant -> NUMBER .)
    QUESTION        reduce using rule 137 (constant -> NUMBER .)
    OR              reduce using rule 137 (constant -> NUMBER .)
    SEMICOLON       reduce using rule 137 (constant -> NUMBER .)
    COMMA           reduce using rule 137 (constant -> NUMBER .)
    RBRACKET        reduce using rule 137 (constant -> NUMBER .)
    RBRACE          reduce using rule 137 (constant -> NUMBER .)
    RPAREN          reduce using rule 137 (constant -> NUMBER .)
    COLON           reduce using rule 137 (constant -> NUMBER .)


state 72

    (138) constant -> FLOAT_NUM .

    LBRACKET        reduce using rule 138 (constant -> FLOAT_NUM .)
    LPAREN          reduce using rule 138 (constant -> FLOAT_NUM .)
    DOT             reduce using rule 138 (constant -> FLOAT_NUM .)
    ARROW           reduce using rule 138 (constant -> FLOAT_NUM .)
    INCREMENT       reduce using rule 138 (constant -> FLOAT_NUM .)
    DECREMENT       reduce using rule 138 (constant -> FLOAT_NUM .)
    ASSIGN          reduce using rule 138 (constant -> FLOAT_NUM .)
    TIMES_ASSIGN    reduce using rule 138 (constant -> FLOAT_NUM .)
    DIVIDE_ASSIGN   reduce using rule 138 (constant -> FLOAT_NUM .)
    PLUS_ASSIGN     reduce using rule 138 (constant -> FLOAT_NUM .)
    MINUS_ASSIGN    reduce using rule 138 (constant -> FLOAT_NUM .)
    TIMES           reduce using rule 138 (constant -> FLOAT_NUM .)
    DIVIDE          reduce using rule 138 (constant -> FLOAT_NUM .)
    MODULO          reduce using rule 138 (constant -> FLOAT_NUM .)
    PLUS            reduce using rule 138 (constant -> FLOAT_NUM .)
    MINUS           reduce using rule 138 (constant -> FLOAT_NUM .)
    LSHIFT          reduce using rule 138 (constant -> FLOAT_NUM .)
    RSHIFT          reduce using rule 138 (constant -> FLOAT_NUM .)
    LT              reduce using rule 138 (constant -> FLOAT_NUM .)
    GT              reduce using rule 138 (constant -> FLOAT_NUM .)
    LE              reduce using rule 138 (constant -> FLOAT_NUM .)
    GE              reduce using rule 138 (constant -> FLOAT_NUM .)
    EQ              reduce using rule 138 (constant -> FLOAT_NUM .)
    NE              reduce using rule 138 (constant -> FLOAT_NUM .)
    BITWISE_AND     reduce using rule 138 (constant -> FLOAT_NUM .)
    BITWISE_XOR     reduce using rule 138 (constant -> FLOAT_NUM .)
    BITWISE_OR      reduce using rule 138 (constant -> FLOAT_NUM .)
    AND             reduce using rule 138 (constant -> FLOAT_NUM .)
    QUESTION        reduce using rule 138 (constant -> FLOAT_NUM .)
    OR              reduce using rule 138 (constant -> FLOAT_NUM .)
    SEMICOLON       reduce using rule 138 (constant -> FLOAT_NUM .)
    COMMA           reduce using rule 138 (constant -> FLOAT_NUM .)
    RBRACKET        reduce using rule 138 (constant -> FLOAT_NUM .)
    RBRACE          reduce using rule 138 (constant -> FLOAT_NUM .)
    RPAREN          reduce using rule 138 (constant -> FLOAT_NUM .)
    COLON           reduce using rule 138 (constant -> FLOAT_NUM .)


state 73

    (139) constant -> CHAR_LITERAL .

    LBRACKET        reduce using rule 139 (constant -> CHAR_LITERAL .)
    LPAREN          reduce using rule 139 (constant -> CHAR_LITERAL .)
    DOT             reduce using rule 139 (constant -> CHAR_LITERAL .)
    ARROW           reduce using rule 139 (constant -> CHAR_LITERAL .)
    INCREMENT       reduce using rule 139 (constant -> CHAR_LITERAL .)
    DECREMENT       reduce using rule 139 (constant -> CHAR_LITERAL .)
    ASSIGN          reduce using rule 139 (constant -> CHAR_LITERAL .)
    TIMES_ASSIGN    reduce using rule 139 (constant -> CHAR_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 139 (constant -> CHAR_LITERAL .)
    PLUS_ASSIGN     reduce using rule 139 (constant -> CHAR_LITERAL .)
    MINUS_ASSIGN    reduce using rule 139 (constant -> CHAR_LITERAL .)
    TIMES           reduce using rule 139 (constant -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 139 (constant -> CHAR_LITERAL .)
    MODULO          reduce using rule 139 (constant -> CHAR_LITERAL .)
    PLUS            reduce using rule 139 (constant -> CHAR_LITERAL .)
    MINUS           reduce using rule 139 (constant -> CHAR_LITERAL .)
    LSHIFT          reduce using rule 139 (constant -> CHAR_LITERAL .)
    RSHIFT          reduce using rule 139 (constant -> CHAR_LITERAL .)
    LT              reduce using rule 139 (constant -> CHAR_LITERAL .)
    GT              reduce using rule 139 (constant -> CHAR_LITERAL .)
    LE              reduce using rule 139 (constant -> CHAR_LITERAL .)
    GE              reduce using rule 139 (constant -> CHAR_LITERAL .)
    EQ              reduce using rule 139 (constant -> CHAR_LITERAL .)
    NE              reduce using rule 139 (constant -> CHAR_LITERAL .)
    BITWISE_AND     reduce using rule 139 (constant -> CHAR_LITERAL .)
    BITWISE_XOR     reduce using rule 139 (constant -> CHAR_LITERAL .)
    BITWISE_OR      reduce using rule 139 (constant -> CHAR_LITERAL .)
    AND             reduce using rule 139 (constant -> CHAR_LITERAL .)
    QUESTION        reduce using rule 139 (constant -> CHAR_LITERAL .)
    OR              reduce using rule 139 (constant -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 139 (constant -> CHAR_LITERAL .)
    COMMA           reduce using rule 139 (constant -> CHAR_LITERAL .)
    RBRACKET        reduce using rule 139 (constant -> CHAR_LITERAL .)
    RBRACE          reduce using rule 139 (constant -> CHAR_LITERAL .)
    RPAREN          reduce using rule 139 (constant -> CHAR_LITERAL .)
    COLON           reduce using rule 139 (constant -> CHAR_LITERAL .)


state 74

    (87) bitwise_xor_expression -> bitwise_and_expression .
    (90) bitwise_and_expression -> bitwise_and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    BITWISE_OR      reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    AND             reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    QUESTION        reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    OR              reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    SEMICOLON       reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    COMMA           reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    RBRACKET        reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    RBRACE          reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    RPAREN          reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    COLON           reduce using rule 87 (bitwise_xor_expression -> bitwise_and_expression .)
    BITWISE_AND     shift and go to state 118


state 75

    (89) bitwise_and_expression -> equality_expression .
    (92) equality_expression -> equality_expression . EQ relational_expression
    (93) equality_expression -> equality_expression . NE relational_expression

    BITWISE_AND     reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    AND             reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    QUESTION        reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    OR              reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    COMMA           reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    RBRACE          reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    RPAREN          reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    COLON           reduce using rule 89 (bitwise_and_expression -> equality_expression .)
    EQ              shift and go to state 119
    NE              shift and go to state 120


state 76

    (91) equality_expression -> relational_expression .
    (95) relational_expression -> relational_expression . LT shift_expression
    (96) relational_expression -> relational_expression . GT shift_expression
    (97) relational_expression -> relational_expression . LE shift_expression
    (98) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 91 (equality_expression -> relational_expression .)
    NE              reduce using rule 91 (equality_expression -> relational_expression .)
    BITWISE_AND     reduce using rule 91 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 91 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 91 (equality_expression -> relational_expression .)
    AND             reduce using rule 91 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 91 (equality_expression -> relational_expression .)
    OR              reduce using rule 91 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 91 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 91 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 91 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 91 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 91 (equality_expression -> relational_expression .)
    COLON           reduce using rule 91 (equality_expression -> relational_expression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LE              shift and go to state 123
    GE              shift and go to state 124


state 77

    (94) relational_expression -> shift_expression .
    (100) shift_expression -> shift_expression . LSHIFT additive_expression
    (101) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 94 (relational_expression -> shift_expression .)
    GT              reduce using rule 94 (relational_expression -> shift_expression .)
    LE              reduce using rule 94 (relational_expression -> shift_expression .)
    GE              reduce using rule 94 (relational_expression -> shift_expression .)
    EQ              reduce using rule 94 (relational_expression -> shift_expression .)
    NE              reduce using rule 94 (relational_expression -> shift_expression .)
    BITWISE_AND     reduce using rule 94 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 94 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 94 (relational_expression -> shift_expression .)
    AND             reduce using rule 94 (relational_expression -> shift_expression .)
    QUESTION        reduce using rule 94 (relational_expression -> shift_expression .)
    OR              reduce using rule 94 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 94 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 94 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 94 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 94 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 94 (relational_expression -> shift_expression .)
    COLON           reduce using rule 94 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 78

    (99) shift_expression -> additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 99 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 99 (shift_expression -> additive_expression .)
    LT              reduce using rule 99 (shift_expression -> additive_expression .)
    GT              reduce using rule 99 (shift_expression -> additive_expression .)
    LE              reduce using rule 99 (shift_expression -> additive_expression .)
    GE              reduce using rule 99 (shift_expression -> additive_expression .)
    EQ              reduce using rule 99 (shift_expression -> additive_expression .)
    NE              reduce using rule 99 (shift_expression -> additive_expression .)
    BITWISE_AND     reduce using rule 99 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 99 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 99 (shift_expression -> additive_expression .)
    AND             reduce using rule 99 (shift_expression -> additive_expression .)
    QUESTION        reduce using rule 99 (shift_expression -> additive_expression .)
    OR              reduce using rule 99 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 99 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 99 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 99 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 99 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 99 (shift_expression -> additive_expression .)
    COLON           reduce using rule 99 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 79

    (102) additive_expression -> multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    BITWISE_AND     reduce using rule 102 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 102 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 102 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 102 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 102 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131


state 80

    (39) declarator -> declarator LBRACKET RBRACKET .

    ASSIGN          reduce using rule 39 (declarator -> declarator LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 39 (declarator -> declarator LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 39 (declarator -> declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 39 (declarator -> declarator LBRACKET RBRACKET .)


state 81

    (40) declarator -> declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 132


state 82

    (80) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 80 (constant_expression -> conditional_expression .)


state 83

    (109) cast_expression -> unary_expression .

    TIMES           reduce using rule 109 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 109 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 109 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 109 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 109 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    LT              reduce using rule 109 (cast_expression -> unary_expression .)
    GT              reduce using rule 109 (cast_expression -> unary_expression .)
    LE              reduce using rule 109 (cast_expression -> unary_expression .)
    GE              reduce using rule 109 (cast_expression -> unary_expression .)
    EQ              reduce using rule 109 (cast_expression -> unary_expression .)
    NE              reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 109 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 109 (cast_expression -> unary_expression .)
    AND             reduce using rule 109 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 109 (cast_expression -> unary_expression .)
    OR              reduce using rule 109 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 109 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 109 (cast_expression -> unary_expression .)
    TIMES_ASSIGN    reduce using rule 109 (cast_expression -> unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 109 (cast_expression -> unary_expression .)
    PLUS_ASSIGN     reduce using rule 109 (cast_expression -> unary_expression .)
    MINUS_ASSIGN    reduce using rule 109 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 109 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 109 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 109 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 109 (cast_expression -> unary_expression .)
    COLON           reduce using rule 109 (cast_expression -> unary_expression .)


state 84

    (110) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (134) primary_expression -> LPAREN . expression RPAREN
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    type_specifier                 shift and go to state 113
    cast_expression                shift and go to state 55
    expression                     shift and go to state 112
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 85

    (10) parameter_declaration -> type_specifier IDENTIFIER .

    RPAREN          reduce using rule 10 (parameter_declaration -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 10 (parameter_declaration -> type_specifier IDENTIFIER .)


state 86

    (6) function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN . compound_statement
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 89

    compound_statement             shift and go to state 133

state 87

    (9) parameter_list -> parameter_list COMMA . parameter_declaration
    (10) parameter_declaration -> . type_specifier IDENTIFIER
    (11) parameter_declaration -> . type_specifier
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16

    parameter_declaration          shift and go to state 134
    type_specifier                 shift and go to state 40
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18

state 88

    (7) function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .

    VOID            reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    LONG            reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    BOOL            reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement .)


state 89

    (52) compound_statement -> LBRACE . RBRACE
    (53) compound_statement -> LBRACE . statement_list RBRACE
    (54) statement_list -> . statement
    (55) statement_list -> . statement_list statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    RBRACE          shift and go to state 135
    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    statement_list                 shift and go to state 136
    statement                      shift and go to state 137
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    expression                     shift and go to state 145
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 90

    (42) initializer -> LBRACE initializer_list . RBRACE
    (43) initializer -> LBRACE initializer_list . COMMA RBRACE
    (45) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 155
    COMMA           shift and go to state 156


state 91

    (44) initializer_list -> initializer .

    RBRACE          reduce using rule 44 (initializer_list -> initializer .)
    COMMA           reduce using rule 44 (initializer_list -> initializer .)


state 92

    (72) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    unary_expression               shift and go to state 49
    assignment_expression          shift and go to state 157
    conditional_expression         shift and go to state 48
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 93

    (73) assignment_operator -> ASSIGN .

    INCREMENT       reduce using rule 73 (assignment_operator -> ASSIGN .)
    DECREMENT       reduce using rule 73 (assignment_operator -> ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> ASSIGN .)
    BITWISE_AND     reduce using rule 73 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 73 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> ASSIGN .)
    BITWISE_NOT     reduce using rule 73 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 73 (assignment_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 73 (assignment_operator -> ASSIGN .)
    NUMBER          reduce using rule 73 (assignment_operator -> ASSIGN .)
    FLOAT_NUM       reduce using rule 73 (assignment_operator -> ASSIGN .)
    CHAR_LITERAL    reduce using rule 73 (assignment_operator -> ASSIGN .)


state 94

    (74) assignment_operator -> TIMES_ASSIGN .

    INCREMENT       reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    DECREMENT       reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    BITWISE_AND     reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    TIMES           reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    BITWISE_NOT     reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    NUMBER          reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_NUM       reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)
    CHAR_LITERAL    reduce using rule 74 (assignment_operator -> TIMES_ASSIGN .)


state 95

    (75) assignment_operator -> DIVIDE_ASSIGN .

    INCREMENT       reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    BITWISE_AND     reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    TIMES           reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    BITWISE_NOT     reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    NUMBER          reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_NUM       reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)
    CHAR_LITERAL    reduce using rule 75 (assignment_operator -> DIVIDE_ASSIGN .)


state 96

    (76) assignment_operator -> PLUS_ASSIGN .

    INCREMENT       reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    SIZEOF          reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    BITWISE_AND     reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    TIMES           reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    BITWISE_NOT     reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    NUMBER          reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_NUM       reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 76 (assignment_operator -> PLUS_ASSIGN .)


state 97

    (77) assignment_operator -> MINUS_ASSIGN .

    INCREMENT       reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    DECREMENT       reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    SIZEOF          reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    BITWISE_AND     reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    TIMES           reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    BITWISE_NOT     reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    NUMBER          reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_NUM       reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 77 (assignment_operator -> MINUS_ASSIGN .)


state 98

    (79) conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    logical_or_expression          shift and go to state 50
    expression                     shift and go to state 158
    conditional_expression         shift and go to state 48
    assignment_expression          shift and go to state 114
    unary_expression               shift and go to state 49
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 99

    (82) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    logical_and_expression         shift and go to state 159
    bitwise_or_expression          shift and go to state 67
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 100

    (124) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    postfix_expression             shift and go to state 51
    expression                     shift and go to state 160
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 101

    (125) postfix_expression -> postfix_expression LPAREN . RPAREN
    (126) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (135) argument_expression_list -> . assignment_expression
    (136) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    RPAREN          shift and go to state 161
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    postfix_expression             shift and go to state 51
    argument_expression_list       shift and go to state 162
    assignment_expression          shift and go to state 163
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 102

    (127) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 164


state 103

    (128) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 165


state 104

    (129) postfix_expression -> postfix_expression INCREMENT .

    LBRACKET        reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LPAREN          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DOT             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    ASSIGN          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    TIMES_ASSIGN    reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE_ASSIGN   reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS_ASSIGN     reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS_ASSIGN    reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    TIMES           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    MODULO          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFT          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFT          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LT              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    GT              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    GE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    EQ              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    NE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND     reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR     reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR      reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    AND             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    QUESTION        reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    OR              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    SEMICOLON       reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACKET        reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACE          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RPAREN          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)


state 105

    (130) postfix_expression -> postfix_expression DECREMENT .

    LBRACKET        reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DOT             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    ASSIGN          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    TIMES_ASSIGN    reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE_ASSIGN   reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS_ASSIGN     reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS_ASSIGN    reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    TIMES           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    MODULO          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LT              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    GT              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    GE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    EQ              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    NE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND     reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR     reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR      reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    AND             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    QUESTION        reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    OR              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    SEMICOLON       reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACKET        reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACE          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)


state 106

    (112) unary_expression -> INCREMENT unary_expression .

    ASSIGN          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    TIMES_ASSIGN    reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    PLUS_ASSIGN     reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    MINUS_ASSIGN    reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    TIMES           reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    MODULO          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND     reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR      reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    QUESTION        reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    SEMICOLON       reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 112 (unary_expression -> INCREMENT unary_expression .)


state 107

    (134) primary_expression -> LPAREN . expression RPAREN
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 112
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 108

    (113) unary_expression -> DECREMENT unary_expression .

    ASSIGN          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    TIMES_ASSIGN    reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    PLUS_ASSIGN     reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    MINUS_ASSIGN    reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    TIMES           reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    MODULO          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND     reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR      reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    QUESTION        reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    SEMICOLON       reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 113 (unary_expression -> DECREMENT unary_expression .)


state 109

    (114) unary_expression -> unary_operator cast_expression .

    ASSIGN          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    TIMES_ASSIGN    reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    DIVIDE_ASSIGN   reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    PLUS_ASSIGN     reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    MINUS_ASSIGN    reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    MODULO          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND     reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR     reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR      reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 114 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 114 (unary_expression -> unary_operator cast_expression .)


state 110

    (115) unary_expression -> SIZEOF unary_expression .

    ASSIGN          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    TIMES_ASSIGN    reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    PLUS_ASSIGN     reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    MINUS_ASSIGN    reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    MODULO          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND     reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR     reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR      reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 115 (unary_expression -> SIZEOF unary_expression .)


state 111

    (116) unary_expression -> SIZEOF LPAREN . type_specifier RPAREN
    (134) primary_expression -> LPAREN . expression RPAREN
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    type_specifier                 shift and go to state 166
    expression                     shift and go to state 112
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 112

    (134) primary_expression -> LPAREN expression . RPAREN
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 168


state 113

    (110) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 169


state 114

    (69) expression -> assignment_expression .

    RPAREN          reduce using rule 69 (expression -> assignment_expression .)
    COMMA           reduce using rule 69 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 69 (expression -> assignment_expression .)
    COLON           reduce using rule 69 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 69 (expression -> assignment_expression .)


state 115

    (84) logical_and_expression -> logical_and_expression AND . bitwise_or_expression
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    bitwise_or_expression          shift and go to state 170
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 116

    (86) bitwise_or_expression -> bitwise_or_expression BITWISE_OR . bitwise_xor_expression
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    bitwise_xor_expression         shift and go to state 171
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 117

    (88) bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR . bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    bitwise_and_expression         shift and go to state 172
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 118

    (90) bitwise_and_expression -> bitwise_and_expression BITWISE_AND . equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    equality_expression            shift and go to state 173
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 119

    (92) equality_expression -> equality_expression EQ . relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    relational_expression          shift and go to state 174
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 120

    (93) equality_expression -> equality_expression NE . relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    relational_expression          shift and go to state 175
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 121

    (95) relational_expression -> relational_expression LT . shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    shift_expression               shift and go to state 176
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 122

    (96) relational_expression -> relational_expression GT . shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    shift_expression               shift and go to state 177
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 123

    (97) relational_expression -> relational_expression LE . shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 124

    (98) relational_expression -> relational_expression GE . shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    shift_expression               shift and go to state 179
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 125

    (100) shift_expression -> shift_expression LSHIFT . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 126

    (101) shift_expression -> shift_expression RSHIFT . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    additive_expression            shift and go to state 181
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 127

    (103) additive_expression -> additive_expression PLUS . multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    multiplicative_expression      shift and go to state 182
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 128

    (104) additive_expression -> additive_expression MINUS . multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    multiplicative_expression      shift and go to state 183
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 129

    (106) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    cast_expression                shift and go to state 184
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 130

    (107) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    cast_expression                shift and go to state 185
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 131

    (108) multiplicative_expression -> multiplicative_expression MODULO . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 132

    (40) declarator -> declarator LBRACKET constant_expression RBRACKET .

    ASSIGN          reduce using rule 40 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 40 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    SEMICOLON       reduce using rule 40 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 40 (declarator -> declarator LBRACKET constant_expression RBRACKET .)


state 133

    (6) function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    LONG            reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    BOOL            reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement .)


state 134

    (9) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 9 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 9 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 135

    (52) compound_statement -> LBRACE RBRACE .

    VOID            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BOOL            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BITWISE_AND     reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BITWISE_NOT     reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FLOAT_NUM       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CHAR_LITERAL    reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)


state 136

    (53) compound_statement -> LBRACE statement_list . RBRACE
    (55) statement_list -> statement_list . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    RBRACE          shift and go to state 187
    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    statement                      shift and go to state 188
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    expression                     shift and go to state 145
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 137

    (54) statement_list -> statement .

    RBRACE          reduce using rule 54 (statement_list -> statement .)
    LBRACE          reduce using rule 54 (statement_list -> statement .)
    SEMICOLON       reduce using rule 54 (statement_list -> statement .)
    IF              reduce using rule 54 (statement_list -> statement .)
    SWITCH          reduce using rule 54 (statement_list -> statement .)
    WHILE           reduce using rule 54 (statement_list -> statement .)
    FOR             reduce using rule 54 (statement_list -> statement .)
    DO              reduce using rule 54 (statement_list -> statement .)
    BREAK           reduce using rule 54 (statement_list -> statement .)
    CONTINUE        reduce using rule 54 (statement_list -> statement .)
    RETURN          reduce using rule 54 (statement_list -> statement .)
    VOID            reduce using rule 54 (statement_list -> statement .)
    CHAR            reduce using rule 54 (statement_list -> statement .)
    SHORT           reduce using rule 54 (statement_list -> statement .)
    INT             reduce using rule 54 (statement_list -> statement .)
    LONG            reduce using rule 54 (statement_list -> statement .)
    FLOAT           reduce using rule 54 (statement_list -> statement .)
    DOUBLE          reduce using rule 54 (statement_list -> statement .)
    SIGNED          reduce using rule 54 (statement_list -> statement .)
    UNSIGNED        reduce using rule 54 (statement_list -> statement .)
    BOOL            reduce using rule 54 (statement_list -> statement .)
    INCREMENT       reduce using rule 54 (statement_list -> statement .)
    DECREMENT       reduce using rule 54 (statement_list -> statement .)
    SIZEOF          reduce using rule 54 (statement_list -> statement .)
    BITWISE_AND     reduce using rule 54 (statement_list -> statement .)
    TIMES           reduce using rule 54 (statement_list -> statement .)
    PLUS            reduce using rule 54 (statement_list -> statement .)
    MINUS           reduce using rule 54 (statement_list -> statement .)
    BITWISE_NOT     reduce using rule 54 (statement_list -> statement .)
    NOT             reduce using rule 54 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 54 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 54 (statement_list -> statement .)
    LPAREN          reduce using rule 54 (statement_list -> statement .)
    NUMBER          reduce using rule 54 (statement_list -> statement .)
    FLOAT_NUM       reduce using rule 54 (statement_list -> statement .)
    CHAR_LITERAL    reduce using rule 54 (statement_list -> statement .)


state 138

    (46) statement -> compound_statement .

    RBRACE          reduce using rule 46 (statement -> compound_statement .)
    LBRACE          reduce using rule 46 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 46 (statement -> compound_statement .)
    IF              reduce using rule 46 (statement -> compound_statement .)
    SWITCH          reduce using rule 46 (statement -> compound_statement .)
    WHILE           reduce using rule 46 (statement -> compound_statement .)
    FOR             reduce using rule 46 (statement -> compound_statement .)
    DO              reduce using rule 46 (statement -> compound_statement .)
    BREAK           reduce using rule 46 (statement -> compound_statement .)
    CONTINUE        reduce using rule 46 (statement -> compound_statement .)
    RETURN          reduce using rule 46 (statement -> compound_statement .)
    VOID            reduce using rule 46 (statement -> compound_statement .)
    CHAR            reduce using rule 46 (statement -> compound_statement .)
    SHORT           reduce using rule 46 (statement -> compound_statement .)
    INT             reduce using rule 46 (statement -> compound_statement .)
    LONG            reduce using rule 46 (statement -> compound_statement .)
    FLOAT           reduce using rule 46 (statement -> compound_statement .)
    DOUBLE          reduce using rule 46 (statement -> compound_statement .)
    SIGNED          reduce using rule 46 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 46 (statement -> compound_statement .)
    BOOL            reduce using rule 46 (statement -> compound_statement .)
    INCREMENT       reduce using rule 46 (statement -> compound_statement .)
    DECREMENT       reduce using rule 46 (statement -> compound_statement .)
    SIZEOF          reduce using rule 46 (statement -> compound_statement .)
    BITWISE_AND     reduce using rule 46 (statement -> compound_statement .)
    TIMES           reduce using rule 46 (statement -> compound_statement .)
    PLUS            reduce using rule 46 (statement -> compound_statement .)
    MINUS           reduce using rule 46 (statement -> compound_statement .)
    BITWISE_NOT     reduce using rule 46 (statement -> compound_statement .)
    NOT             reduce using rule 46 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 46 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 46 (statement -> compound_statement .)
    LPAREN          reduce using rule 46 (statement -> compound_statement .)
    NUMBER          reduce using rule 46 (statement -> compound_statement .)
    FLOAT_NUM       reduce using rule 46 (statement -> compound_statement .)
    CHAR_LITERAL    reduce using rule 46 (statement -> compound_statement .)
    ELSE            reduce using rule 46 (statement -> compound_statement .)


state 139

    (47) statement -> expression_statement .

    RBRACE          reduce using rule 47 (statement -> expression_statement .)
    LBRACE          reduce using rule 47 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 47 (statement -> expression_statement .)
    IF              reduce using rule 47 (statement -> expression_statement .)
    SWITCH          reduce using rule 47 (statement -> expression_statement .)
    WHILE           reduce using rule 47 (statement -> expression_statement .)
    FOR             reduce using rule 47 (statement -> expression_statement .)
    DO              reduce using rule 47 (statement -> expression_statement .)
    BREAK           reduce using rule 47 (statement -> expression_statement .)
    CONTINUE        reduce using rule 47 (statement -> expression_statement .)
    RETURN          reduce using rule 47 (statement -> expression_statement .)
    VOID            reduce using rule 47 (statement -> expression_statement .)
    CHAR            reduce using rule 47 (statement -> expression_statement .)
    SHORT           reduce using rule 47 (statement -> expression_statement .)
    INT             reduce using rule 47 (statement -> expression_statement .)
    LONG            reduce using rule 47 (statement -> expression_statement .)
    FLOAT           reduce using rule 47 (statement -> expression_statement .)
    DOUBLE          reduce using rule 47 (statement -> expression_statement .)
    SIGNED          reduce using rule 47 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 47 (statement -> expression_statement .)
    BOOL            reduce using rule 47 (statement -> expression_statement .)
    INCREMENT       reduce using rule 47 (statement -> expression_statement .)
    DECREMENT       reduce using rule 47 (statement -> expression_statement .)
    SIZEOF          reduce using rule 47 (statement -> expression_statement .)
    BITWISE_AND     reduce using rule 47 (statement -> expression_statement .)
    TIMES           reduce using rule 47 (statement -> expression_statement .)
    PLUS            reduce using rule 47 (statement -> expression_statement .)
    MINUS           reduce using rule 47 (statement -> expression_statement .)
    BITWISE_NOT     reduce using rule 47 (statement -> expression_statement .)
    NOT             reduce using rule 47 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 47 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 47 (statement -> expression_statement .)
    LPAREN          reduce using rule 47 (statement -> expression_statement .)
    NUMBER          reduce using rule 47 (statement -> expression_statement .)
    FLOAT_NUM       reduce using rule 47 (statement -> expression_statement .)
    CHAR_LITERAL    reduce using rule 47 (statement -> expression_statement .)
    ELSE            reduce using rule 47 (statement -> expression_statement .)


state 140

    (48) statement -> selection_statement .

    RBRACE          reduce using rule 48 (statement -> selection_statement .)
    LBRACE          reduce using rule 48 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 48 (statement -> selection_statement .)
    IF              reduce using rule 48 (statement -> selection_statement .)
    SWITCH          reduce using rule 48 (statement -> selection_statement .)
    WHILE           reduce using rule 48 (statement -> selection_statement .)
    FOR             reduce using rule 48 (statement -> selection_statement .)
    DO              reduce using rule 48 (statement -> selection_statement .)
    BREAK           reduce using rule 48 (statement -> selection_statement .)
    CONTINUE        reduce using rule 48 (statement -> selection_statement .)
    RETURN          reduce using rule 48 (statement -> selection_statement .)
    VOID            reduce using rule 48 (statement -> selection_statement .)
    CHAR            reduce using rule 48 (statement -> selection_statement .)
    SHORT           reduce using rule 48 (statement -> selection_statement .)
    INT             reduce using rule 48 (statement -> selection_statement .)
    LONG            reduce using rule 48 (statement -> selection_statement .)
    FLOAT           reduce using rule 48 (statement -> selection_statement .)
    DOUBLE          reduce using rule 48 (statement -> selection_statement .)
    SIGNED          reduce using rule 48 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 48 (statement -> selection_statement .)
    BOOL            reduce using rule 48 (statement -> selection_statement .)
    INCREMENT       reduce using rule 48 (statement -> selection_statement .)
    DECREMENT       reduce using rule 48 (statement -> selection_statement .)
    SIZEOF          reduce using rule 48 (statement -> selection_statement .)
    BITWISE_AND     reduce using rule 48 (statement -> selection_statement .)
    TIMES           reduce using rule 48 (statement -> selection_statement .)
    PLUS            reduce using rule 48 (statement -> selection_statement .)
    MINUS           reduce using rule 48 (statement -> selection_statement .)
    BITWISE_NOT     reduce using rule 48 (statement -> selection_statement .)
    NOT             reduce using rule 48 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 48 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 48 (statement -> selection_statement .)
    LPAREN          reduce using rule 48 (statement -> selection_statement .)
    NUMBER          reduce using rule 48 (statement -> selection_statement .)
    FLOAT_NUM       reduce using rule 48 (statement -> selection_statement .)
    CHAR_LITERAL    reduce using rule 48 (statement -> selection_statement .)
    ELSE            reduce using rule 48 (statement -> selection_statement .)


state 141

    (49) statement -> iteration_statement .

    RBRACE          reduce using rule 49 (statement -> iteration_statement .)
    LBRACE          reduce using rule 49 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 49 (statement -> iteration_statement .)
    IF              reduce using rule 49 (statement -> iteration_statement .)
    SWITCH          reduce using rule 49 (statement -> iteration_statement .)
    WHILE           reduce using rule 49 (statement -> iteration_statement .)
    FOR             reduce using rule 49 (statement -> iteration_statement .)
    DO              reduce using rule 49 (statement -> iteration_statement .)
    BREAK           reduce using rule 49 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 49 (statement -> iteration_statement .)
    RETURN          reduce using rule 49 (statement -> iteration_statement .)
    VOID            reduce using rule 49 (statement -> iteration_statement .)
    CHAR            reduce using rule 49 (statement -> iteration_statement .)
    SHORT           reduce using rule 49 (statement -> iteration_statement .)
    INT             reduce using rule 49 (statement -> iteration_statement .)
    LONG            reduce using rule 49 (statement -> iteration_statement .)
    FLOAT           reduce using rule 49 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 49 (statement -> iteration_statement .)
    SIGNED          reduce using rule 49 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 49 (statement -> iteration_statement .)
    BOOL            reduce using rule 49 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 49 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 49 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 49 (statement -> iteration_statement .)
    BITWISE_AND     reduce using rule 49 (statement -> iteration_statement .)
    TIMES           reduce using rule 49 (statement -> iteration_statement .)
    PLUS            reduce using rule 49 (statement -> iteration_statement .)
    MINUS           reduce using rule 49 (statement -> iteration_statement .)
    BITWISE_NOT     reduce using rule 49 (statement -> iteration_statement .)
    NOT             reduce using rule 49 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 49 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 49 (statement -> iteration_statement .)
    LPAREN          reduce using rule 49 (statement -> iteration_statement .)
    NUMBER          reduce using rule 49 (statement -> iteration_statement .)
    FLOAT_NUM       reduce using rule 49 (statement -> iteration_statement .)
    CHAR_LITERAL    reduce using rule 49 (statement -> iteration_statement .)
    ELSE            reduce using rule 49 (statement -> iteration_statement .)


state 142

    (50) statement -> jump_statement .

    RBRACE          reduce using rule 50 (statement -> jump_statement .)
    LBRACE          reduce using rule 50 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 50 (statement -> jump_statement .)
    IF              reduce using rule 50 (statement -> jump_statement .)
    SWITCH          reduce using rule 50 (statement -> jump_statement .)
    WHILE           reduce using rule 50 (statement -> jump_statement .)
    FOR             reduce using rule 50 (statement -> jump_statement .)
    DO              reduce using rule 50 (statement -> jump_statement .)
    BREAK           reduce using rule 50 (statement -> jump_statement .)
    CONTINUE        reduce using rule 50 (statement -> jump_statement .)
    RETURN          reduce using rule 50 (statement -> jump_statement .)
    VOID            reduce using rule 50 (statement -> jump_statement .)
    CHAR            reduce using rule 50 (statement -> jump_statement .)
    SHORT           reduce using rule 50 (statement -> jump_statement .)
    INT             reduce using rule 50 (statement -> jump_statement .)
    LONG            reduce using rule 50 (statement -> jump_statement .)
    FLOAT           reduce using rule 50 (statement -> jump_statement .)
    DOUBLE          reduce using rule 50 (statement -> jump_statement .)
    SIGNED          reduce using rule 50 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 50 (statement -> jump_statement .)
    BOOL            reduce using rule 50 (statement -> jump_statement .)
    INCREMENT       reduce using rule 50 (statement -> jump_statement .)
    DECREMENT       reduce using rule 50 (statement -> jump_statement .)
    SIZEOF          reduce using rule 50 (statement -> jump_statement .)
    BITWISE_AND     reduce using rule 50 (statement -> jump_statement .)
    TIMES           reduce using rule 50 (statement -> jump_statement .)
    PLUS            reduce using rule 50 (statement -> jump_statement .)
    MINUS           reduce using rule 50 (statement -> jump_statement .)
    BITWISE_NOT     reduce using rule 50 (statement -> jump_statement .)
    NOT             reduce using rule 50 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 50 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 50 (statement -> jump_statement .)
    LPAREN          reduce using rule 50 (statement -> jump_statement .)
    NUMBER          reduce using rule 50 (statement -> jump_statement .)
    FLOAT_NUM       reduce using rule 50 (statement -> jump_statement .)
    CHAR_LITERAL    reduce using rule 50 (statement -> jump_statement .)
    ELSE            reduce using rule 50 (statement -> jump_statement .)


state 143

    (51) statement -> declaration .

    RBRACE          reduce using rule 51 (statement -> declaration .)
    LBRACE          reduce using rule 51 (statement -> declaration .)
    SEMICOLON       reduce using rule 51 (statement -> declaration .)
    IF              reduce using rule 51 (statement -> declaration .)
    SWITCH          reduce using rule 51 (statement -> declaration .)
    WHILE           reduce using rule 51 (statement -> declaration .)
    FOR             reduce using rule 51 (statement -> declaration .)
    DO              reduce using rule 51 (statement -> declaration .)
    BREAK           reduce using rule 51 (statement -> declaration .)
    CONTINUE        reduce using rule 51 (statement -> declaration .)
    RETURN          reduce using rule 51 (statement -> declaration .)
    VOID            reduce using rule 51 (statement -> declaration .)
    CHAR            reduce using rule 51 (statement -> declaration .)
    SHORT           reduce using rule 51 (statement -> declaration .)
    INT             reduce using rule 51 (statement -> declaration .)
    LONG            reduce using rule 51 (statement -> declaration .)
    FLOAT           reduce using rule 51 (statement -> declaration .)
    DOUBLE          reduce using rule 51 (statement -> declaration .)
    SIGNED          reduce using rule 51 (statement -> declaration .)
    UNSIGNED        reduce using rule 51 (statement -> declaration .)
    BOOL            reduce using rule 51 (statement -> declaration .)
    INCREMENT       reduce using rule 51 (statement -> declaration .)
    DECREMENT       reduce using rule 51 (statement -> declaration .)
    SIZEOF          reduce using rule 51 (statement -> declaration .)
    BITWISE_AND     reduce using rule 51 (statement -> declaration .)
    TIMES           reduce using rule 51 (statement -> declaration .)
    PLUS            reduce using rule 51 (statement -> declaration .)
    MINUS           reduce using rule 51 (statement -> declaration .)
    BITWISE_NOT     reduce using rule 51 (statement -> declaration .)
    NOT             reduce using rule 51 (statement -> declaration .)
    IDENTIFIER      reduce using rule 51 (statement -> declaration .)
    STRING_LITERAL  reduce using rule 51 (statement -> declaration .)
    LPAREN          reduce using rule 51 (statement -> declaration .)
    NUMBER          reduce using rule 51 (statement -> declaration .)
    FLOAT_NUM       reduce using rule 51 (statement -> declaration .)
    CHAR_LITERAL    reduce using rule 51 (statement -> declaration .)
    ELSE            reduce using rule 51 (statement -> declaration .)


state 144

    (56) expression_statement -> SEMICOLON .

    RBRACE          reduce using rule 56 (expression_statement -> SEMICOLON .)
    LBRACE          reduce using rule 56 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 56 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 56 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 56 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 56 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 56 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 56 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 56 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 56 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 56 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 56 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 56 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 56 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 56 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 56 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 56 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 56 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 56 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 56 (expression_statement -> SEMICOLON .)
    BOOL            reduce using rule 56 (expression_statement -> SEMICOLON .)
    INCREMENT       reduce using rule 56 (expression_statement -> SEMICOLON .)
    DECREMENT       reduce using rule 56 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 56 (expression_statement -> SEMICOLON .)
    BITWISE_AND     reduce using rule 56 (expression_statement -> SEMICOLON .)
    TIMES           reduce using rule 56 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 56 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 56 (expression_statement -> SEMICOLON .)
    BITWISE_NOT     reduce using rule 56 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 56 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 56 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 56 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 56 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 56 (expression_statement -> SEMICOLON .)
    FLOAT_NUM       reduce using rule 56 (expression_statement -> SEMICOLON .)
    CHAR_LITERAL    reduce using rule 56 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 56 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 56 (expression_statement -> SEMICOLON .)


state 145

    (57) expression_statement -> expression . SEMICOLON
    (70) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 189
    COMMA           shift and go to state 168


state 146

    (58) selection_statement -> IF . LPAREN expression RPAREN statement
    (59) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 190


state 147

    (60) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 191


state 148

    (61) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 192


state 149

    (62) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 193


state 150

    (64) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    statement                      shift and go to state 194
    expression                     shift and go to state 145
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 151

    (65) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 195


state 152

    (66) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 196


state 153

    (67) jump_statement -> RETURN . SEMICOLON
    (68) jump_statement -> RETURN . expression SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    SEMICOLON       shift and go to state 197
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 198
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 154

    (32) declaration -> type_specifier . init_declarator_list SEMICOLON
    (33) init_declarator_list -> . init_declarator
    (34) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (35) init_declarator -> . declarator
    (36) init_declarator -> . declarator ASSIGN initializer
    (37) declarator -> . IDENTIFIER
    (38) declarator -> . TIMES declarator
    (39) declarator -> . declarator LBRACKET RBRACKET
    (40) declarator -> . declarator LBRACKET constant_expression RBRACKET

    IDENTIFIER      shift and go to state 39
    TIMES           shift and go to state 24

    init_declarator_list           shift and go to state 21
    init_declarator                shift and go to state 22
    declarator                     shift and go to state 23

state 155

    (42) initializer -> LBRACE initializer_list RBRACE .

    SEMICOLON       reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)


state 156

    (43) initializer -> LBRACE initializer_list COMMA . RBRACE
    (45) initializer_list -> initializer_list COMMA . initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    RBRACE          shift and go to state 199
    LBRACE          shift and go to state 47
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    initializer                    shift and go to state 200
    assignment_expression          shift and go to state 46
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 157

    (72) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 72 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 158

    (79) conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression
    (70) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 201
    COMMA           shift and go to state 168


state 159

    (82) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (84) logical_and_expression -> logical_and_expression . AND bitwise_or_expression

    QUESTION        reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMICOLON       reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COLON           reduce using rule 82 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 115


state 160

    (124) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (70) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 202
    COMMA           shift and go to state 168


state 161

    (125) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INCREMENT       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DECREMENT       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES_ASSIGN    reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS_ASSIGN     reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS_ASSIGN    reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BITWISE_AND     reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BITWISE_XOR     reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BITWISE_OR      reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESTION        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 162

    (126) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (136) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 203
    COMMA           shift and go to state 204


state 163

    (135) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 135 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 135 (argument_expression_list -> assignment_expression .)


state 164

    (127) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LPAREN          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INCREMENT       reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DECREMENT       reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TIMES           reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION        reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 127 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 165

    (128) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    LBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LPAREN          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ASSIGN          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    TIMES           reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULO          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS            reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS           reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LT              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GT              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LE              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GE              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQ              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NE              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND             reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    QUESTION        reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR              reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RBRACE          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RPAREN          reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 128 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 166

    (116) unary_expression -> SIZEOF LPAREN type_specifier . RPAREN

    RPAREN          shift and go to state 205


state 167

    (134) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    TIMES_ASSIGN    reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    BITWISE_AND     reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    BITWISE_XOR     reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    BITWISE_OR      reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 134 (primary_expression -> LPAREN expression RPAREN .)


state 168

    (70) expression -> expression COMMA . assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    assignment_expression          shift and go to state 206
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 169

    (110) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    cast_expression                shift and go to state 207
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 170

    (84) logical_and_expression -> logical_and_expression AND bitwise_or_expression .
    (86) bitwise_or_expression -> bitwise_or_expression . BITWISE_OR bitwise_xor_expression

    AND             reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    QUESTION        reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    OR              reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    SEMICOLON       reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    COMMA           reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    RBRACKET        reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    RBRACE          reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    RPAREN          reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    COLON           reduce using rule 84 (logical_and_expression -> logical_and_expression AND bitwise_or_expression .)
    BITWISE_OR      shift and go to state 116


state 171

    (86) bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .
    (88) bitwise_xor_expression -> bitwise_xor_expression . BITWISE_XOR bitwise_and_expression

    BITWISE_OR      reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    AND             reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    QUESTION        reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    OR              reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    SEMICOLON       reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    COMMA           reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    RBRACKET        reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    RBRACE          reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    RPAREN          reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    COLON           reduce using rule 86 (bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression .)
    BITWISE_XOR     shift and go to state 117


state 172

    (88) bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .
    (90) bitwise_and_expression -> bitwise_and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    BITWISE_OR      reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    AND             reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    QUESTION        reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    OR              reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    SEMICOLON       reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    COMMA           reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    RBRACKET        reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    RBRACE          reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    RPAREN          reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    COLON           reduce using rule 88 (bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression .)
    BITWISE_AND     shift and go to state 118


state 173

    (90) bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .
    (92) equality_expression -> equality_expression . EQ relational_expression
    (93) equality_expression -> equality_expression . NE relational_expression

    BITWISE_AND     reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    BITWISE_XOR     reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    BITWISE_OR      reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    AND             reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    QUESTION        reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    OR              reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    SEMICOLON       reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    COMMA           reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    RBRACKET        reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    RBRACE          reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    RPAREN          reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    COLON           reduce using rule 90 (bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression .)
    EQ              shift and go to state 119
    NE              shift and go to state 120


state 174

    (92) equality_expression -> equality_expression EQ relational_expression .
    (95) relational_expression -> relational_expression . LT shift_expression
    (96) relational_expression -> relational_expression . GT shift_expression
    (97) relational_expression -> relational_expression . LE shift_expression
    (98) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    BITWISE_AND     reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    BITWISE_XOR     reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    BITWISE_OR      reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    QUESTION        reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LE              shift and go to state 123
    GE              shift and go to state 124


state 175

    (93) equality_expression -> equality_expression NE relational_expression .
    (95) relational_expression -> relational_expression . LT shift_expression
    (96) relational_expression -> relational_expression . GT shift_expression
    (97) relational_expression -> relational_expression . LE shift_expression
    (98) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    BITWISE_AND     reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    BITWISE_XOR     reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    BITWISE_OR      reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    QUESTION        reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    SEMICOLON       reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 93 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LE              shift and go to state 123
    GE              shift and go to state 124


state 176

    (95) relational_expression -> relational_expression LT shift_expression .
    (100) shift_expression -> shift_expression . LSHIFT additive_expression
    (101) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    BITWISE_AND     reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    BITWISE_XOR     reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    BITWISE_OR      reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    QUESTION        reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    SEMICOLON       reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 95 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 177

    (96) relational_expression -> relational_expression GT shift_expression .
    (100) shift_expression -> shift_expression . LSHIFT additive_expression
    (101) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    BITWISE_AND     reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    BITWISE_XOR     reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    BITWISE_OR      reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    QUESTION        reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    SEMICOLON       reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 96 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 178

    (97) relational_expression -> relational_expression LE shift_expression .
    (100) shift_expression -> shift_expression . LSHIFT additive_expression
    (101) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    BITWISE_AND     reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    BITWISE_XOR     reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    BITWISE_OR      reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    QUESTION        reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    SEMICOLON       reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 97 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 179

    (98) relational_expression -> relational_expression GE shift_expression .
    (100) shift_expression -> shift_expression . LSHIFT additive_expression
    (101) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    BITWISE_AND     reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    BITWISE_XOR     reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    BITWISE_OR      reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    QUESTION        reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    SEMICOLON       reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 98 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 180

    (100) shift_expression -> shift_expression LSHIFT additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITWISE_AND     reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITWISE_OR      reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESTION        reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 100 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 181

    (101) shift_expression -> shift_expression RSHIFT additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITWISE_AND     reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITWISE_OR      reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESTION        reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 101 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 182

    (103) additive_expression -> additive_expression PLUS multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131


state 183

    (104) additive_expression -> additive_expression MINUS multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131


state 184

    (106) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MODULO          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    BITWISE_AND     reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    BITWISE_XOR     reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    BITWISE_OR      reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    QUESTION        reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 106 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 185

    (107) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULO          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_AND     reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_XOR     reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_OR      reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 186

    (108) multiplicative_expression -> multiplicative_expression MODULO cast_expression .

    TIMES           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DIVIDE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MODULO          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    PLUS            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MINUS           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LSHIFT          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RSHIFT          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LT              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GT              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    NE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    BITWISE_AND     reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    BITWISE_XOR     reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    BITWISE_OR      reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    AND             reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    QUESTION        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    OR              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    SEMICOLON       reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COMMA           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COLON           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)


state 187

    (53) compound_statement -> LBRACE statement_list RBRACE .

    VOID            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    INCREMENT       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DECREMENT       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SIZEOF          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BITWISE_AND     reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BITWISE_NOT     reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT_NUM       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR_LITERAL    reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)


state 188

    (55) statement_list -> statement_list statement .

    RBRACE          reduce using rule 55 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 55 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 55 (statement_list -> statement_list statement .)
    IF              reduce using rule 55 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 55 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 55 (statement_list -> statement_list statement .)
    FOR             reduce using rule 55 (statement_list -> statement_list statement .)
    DO              reduce using rule 55 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 55 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 55 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 55 (statement_list -> statement_list statement .)
    VOID            reduce using rule 55 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 55 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 55 (statement_list -> statement_list statement .)
    INT             reduce using rule 55 (statement_list -> statement_list statement .)
    LONG            reduce using rule 55 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 55 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 55 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 55 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 55 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 55 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 55 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 55 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 55 (statement_list -> statement_list statement .)
    BITWISE_AND     reduce using rule 55 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 55 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 55 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 55 (statement_list -> statement_list statement .)
    BITWISE_NOT     reduce using rule 55 (statement_list -> statement_list statement .)
    NOT             reduce using rule 55 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 55 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 55 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 55 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 55 (statement_list -> statement_list statement .)
    FLOAT_NUM       reduce using rule 55 (statement_list -> statement_list statement .)
    CHAR_LITERAL    reduce using rule 55 (statement_list -> statement_list statement .)


state 189

    (57) expression_statement -> expression SEMICOLON .

    RBRACE          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    BOOL            reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    INCREMENT       reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    DECREMENT       reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    BITWISE_AND     reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    BITWISE_NOT     reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    FLOAT_NUM       reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 57 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 57 (expression_statement -> expression SEMICOLON .)


state 190

    (58) selection_statement -> IF LPAREN . expression RPAREN statement
    (59) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 208
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 191

    (60) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 209
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 192

    (61) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 210
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 193

    (62) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    SEMICOLON       shift and go to state 144
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression_statement           shift and go to state 211
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 194

    (64) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 212


state 195

    (65) jump_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    BITWISE_AND     reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    BITWISE_NOT     reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    FLOAT_NUM       reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    CHAR_LITERAL    reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 65 (jump_statement -> BREAK SEMICOLON .)


state 196

    (66) jump_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    BITWISE_AND     reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    BITWISE_NOT     reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT_NUM       reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR_LITERAL    reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 66 (jump_statement -> CONTINUE SEMICOLON .)


state 197

    (67) jump_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    BITWISE_AND     reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    BITWISE_NOT     reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    FLOAT_NUM       reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 67 (jump_statement -> RETURN SEMICOLON .)


state 198

    (68) jump_statement -> RETURN expression . SEMICOLON
    (70) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 213
    COMMA           shift and go to state 168


state 199

    (43) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMICOLON       reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 200

    (45) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 45 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 45 (initializer_list -> initializer_list COMMA initializer .)


state 201

    (79) conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL

    LPAREN          shift and go to state 84
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    logical_or_expression          shift and go to state 50
    conditional_expression         shift and go to state 214
    logical_and_expression         shift and go to state 58
    bitwise_or_expression          shift and go to state 67
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79
    cast_expression                shift and go to state 55
    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    primary_expression             shift and go to state 59
    constant                       shift and go to state 68

state 202

    (124) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BITWISE_AND     reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BITWISE_XOR     reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BITWISE_OR      reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 203

    (126) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOT             reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INCREMENT       reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DECREMENT       reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES_ASSIGN    reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS_ASSIGN    reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    BITWISE_AND     reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    BITWISE_XOR     reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    BITWISE_OR      reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    QUESTION        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 204

    (136) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    assignment_expression          shift and go to state 215
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 205

    (116) unary_expression -> SIZEOF LPAREN type_specifier RPAREN .

    ASSIGN          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    TIMES_ASSIGN    reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    PLUS_ASSIGN     reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    MINUS_ASSIGN    reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    TIMES           reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    DIVIDE          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    MODULO          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    PLUS            reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    MINUS           reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    LSHIFT          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    RSHIFT          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    LT              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    GT              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    LE              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    GE              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    EQ              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    NE              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    BITWISE_AND     reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    BITWISE_XOR     reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    BITWISE_OR      reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    AND             reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    QUESTION        reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    OR              reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    SEMICOLON       reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    COMMA           reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    RBRACKET        reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    RBRACE          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    RPAREN          reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)
    COLON           reduce using rule 116 (unary_expression -> SIZEOF LPAREN type_specifier RPAREN .)


state 206

    (70) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 70 (expression -> expression COMMA assignment_expression .)


state 207

    (110) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODULO          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LSHIFT          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RSHIFT          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GE              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NE              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BITWISE_AND     reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BITWISE_XOR     reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BITWISE_OR      reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    QUESTION        reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMICOLON       reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES_ASSIGN    reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE_ASSIGN   reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS_ASSIGN     reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS_ASSIGN    reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COLON           reduce using rule 110 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 208

    (58) selection_statement -> IF LPAREN expression . RPAREN statement
    (59) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 216
    COMMA           shift and go to state 168


state 209

    (60) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 168


state 210

    (61) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 218
    COMMA           shift and go to state 168


state 211

    (62) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (63) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    SEMICOLON       shift and go to state 144
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression_statement           shift and go to state 219
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 212

    (64) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 220


state 213

    (68) jump_statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    INCREMENT       reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    DECREMENT       reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    BITWISE_AND     reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    BITWISE_NOT     reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT_NUM       reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 68 (jump_statement -> RETURN expression SEMICOLON .)


state 214

    (79) conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .

    SEMICOLON       reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COMMA           reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACKET        reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACE          reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RPAREN          reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COLON           reduce using rule 79 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)


state 215

    (136) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 136 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 136 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 216

    (58) selection_statement -> IF LPAREN expression RPAREN . statement
    (59) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 145
    statement                      shift and go to state 221
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 217

    (60) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 145
    statement                      shift and go to state 222
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 218

    (61) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 145
    statement                      shift and go to state 223
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 219

    (62) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (63) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    RPAREN          shift and go to state 224
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 225
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 220

    (64) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 226
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 221

    (58) selection_statement -> IF LPAREN expression RPAREN statement .
    (59) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    RBRACE          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BITWISE_AND     reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BITWISE_NOT     reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_NUM       reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_LITERAL    reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ shift and go to state 227 ]


state 222

    (60) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BITWISE_AND     reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BITWISE_NOT     reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_NUM       reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_LITERAL    reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 60 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 223

    (61) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BITWISE_AND     reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BITWISE_NOT     reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_NUM       reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_LITERAL    reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 61 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 224

    (62) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression_statement           shift and go to state 139
    statement                      shift and go to state 228
    compound_statement             shift and go to state 138
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    expression                     shift and go to state 145
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 225

    (63) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 229
    COMMA           shift and go to state 168


state 226

    (64) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 230
    COMMA           shift and go to state 168


state 227

    (59) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression                     shift and go to state 145
    statement                      shift and go to state 231
    compound_statement             shift and go to state 138
    expression_statement           shift and go to state 139
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 228

    (62) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOID            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SHORT           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT             reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LONG            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIGNED          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BOOL            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INCREMENT       reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DECREMENT       reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BITWISE_AND     reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BITWISE_NOT     reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT_NUM       reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR_LITERAL    reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 62 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 229

    (63) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (46) statement -> . compound_statement
    (47) statement -> . expression_statement
    (48) statement -> . selection_statement
    (49) statement -> . iteration_statement
    (50) statement -> . jump_statement
    (51) statement -> . declaration
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (56) expression_statement -> . SEMICOLON
    (57) expression_statement -> . expression SEMICOLON
    (58) selection_statement -> . IF LPAREN expression RPAREN statement
    (59) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (60) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (61) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (62) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (63) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (64) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (65) jump_statement -> . BREAK SEMICOLON
    (66) jump_statement -> . CONTINUE SEMICOLON
    (67) jump_statement -> . RETURN SEMICOLON
    (68) jump_statement -> . RETURN expression SEMICOLON
    (32) declaration -> . type_specifier init_declarator_list SEMICOLON
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . SHORT
    (15) type_specifier -> . INT
    (16) type_specifier -> . LONG
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SIGNED
    (20) type_specifier -> . UNSIGNED
    (21) type_specifier -> . BOOL
    (22) type_specifier -> . signed_type
    (23) type_specifier -> . unsigned_type
    (71) assignment_expression -> . conditional_expression
    (72) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (24) signed_type -> . SIGNED CHAR
    (25) signed_type -> . SIGNED SHORT
    (26) signed_type -> . SIGNED INT
    (27) signed_type -> . SIGNED LONG
    (28) unsigned_type -> . UNSIGNED CHAR
    (29) unsigned_type -> . UNSIGNED SHORT
    (30) unsigned_type -> . UNSIGNED INT
    (31) unsigned_type -> . UNSIGNED LONG
    (78) conditional_expression -> . logical_or_expression
    (79) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (111) unary_expression -> . postfix_expression
    (112) unary_expression -> . INCREMENT unary_expression
    (113) unary_expression -> . DECREMENT unary_expression
    (114) unary_expression -> . unary_operator cast_expression
    (115) unary_expression -> . SIZEOF unary_expression
    (116) unary_expression -> . SIZEOF LPAREN type_specifier RPAREN
    (81) logical_or_expression -> . logical_and_expression
    (82) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (127) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (128) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (117) unary_operator -> . BITWISE_AND
    (118) unary_operator -> . TIMES
    (119) unary_operator -> . PLUS
    (120) unary_operator -> . MINUS
    (121) unary_operator -> . BITWISE_NOT
    (122) unary_operator -> . NOT
    (83) logical_and_expression -> . bitwise_or_expression
    (84) logical_and_expression -> . logical_and_expression AND bitwise_or_expression
    (131) primary_expression -> . IDENTIFIER
    (132) primary_expression -> . constant
    (133) primary_expression -> . STRING_LITERAL
    (134) primary_expression -> . LPAREN expression RPAREN
    (85) bitwise_or_expression -> . bitwise_xor_expression
    (86) bitwise_or_expression -> . bitwise_or_expression BITWISE_OR bitwise_xor_expression
    (137) constant -> . NUMBER
    (138) constant -> . FLOAT_NUM
    (139) constant -> . CHAR_LITERAL
    (87) bitwise_xor_expression -> . bitwise_and_expression
    (88) bitwise_xor_expression -> . bitwise_xor_expression BITWISE_XOR bitwise_and_expression
    (89) bitwise_and_expression -> . equality_expression
    (90) bitwise_and_expression -> . bitwise_and_expression BITWISE_AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) equality_expression -> . equality_expression NE relational_expression
    (94) relational_expression -> . shift_expression
    (95) relational_expression -> . relational_expression LT shift_expression
    (96) relational_expression -> . relational_expression GT shift_expression
    (97) relational_expression -> . relational_expression LE shift_expression
    (98) relational_expression -> . relational_expression GE shift_expression
    (99) shift_expression -> . additive_expression
    (100) shift_expression -> . shift_expression LSHIFT additive_expression
    (101) shift_expression -> . shift_expression RSHIFT additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . cast_expression
    (106) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_specifier RPAREN cast_expression

    LBRACE          shift and go to state 89
    SEMICOLON       shift and go to state 144
    IF              shift and go to state 146
    SWITCH          shift and go to state 147
    WHILE           shift and go to state 148
    FOR             shift and go to state 149
    DO              shift and go to state 150
    BREAK           shift and go to state 151
    CONTINUE        shift and go to state 152
    RETURN          shift and go to state 153
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 14
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 16
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53
    SIZEOF          shift and go to state 56
    BITWISE_AND     shift and go to state 61
    TIMES           shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    BITWISE_NOT     shift and go to state 65
    NOT             shift and go to state 66
    IDENTIFIER      shift and go to state 60
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 71
    FLOAT_NUM       shift and go to state 72
    CHAR_LITERAL    shift and go to state 73

    expression_statement           shift and go to state 139
    expression                     shift and go to state 145
    statement                      shift and go to state 232
    compound_statement             shift and go to state 138
    selection_statement            shift and go to state 140
    iteration_statement            shift and go to state 141
    jump_statement                 shift and go to state 142
    declaration                    shift and go to state 143
    type_specifier                 shift and go to state 154
    assignment_expression          shift and go to state 114
    signed_type                    shift and go to state 17
    unsigned_type                  shift and go to state 18
    conditional_expression         shift and go to state 48
    unary_expression               shift and go to state 49
    logical_or_expression          shift and go to state 50
    postfix_expression             shift and go to state 51
    unary_operator                 shift and go to state 54
    cast_expression                shift and go to state 55
    logical_and_expression         shift and go to state 58
    primary_expression             shift and go to state 59
    bitwise_or_expression          shift and go to state 67
    constant                       shift and go to state 68
    bitwise_xor_expression         shift and go to state 70
    bitwise_and_expression         shift and go to state 74
    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 76
    shift_expression               shift and go to state 77
    additive_expression            shift and go to state 78
    multiplicative_expression      shift and go to state 79

state 230

    (64) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 233


state 231

    (59) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BITWISE_AND     reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BITWISE_NOT     reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_NUM       reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_LITERAL    reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 59 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 232

    (63) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOID            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LONG            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INCREMENT       reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DECREMENT       reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BITWISE_AND     reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BITWISE_NOT     reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT_NUM       reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR_LITERAL    reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 63 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 233

    (64) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INCREMENT       reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DECREMENT       reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BITWISE_AND     reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BITWISE_NOT     reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_NUM       reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 64 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)

