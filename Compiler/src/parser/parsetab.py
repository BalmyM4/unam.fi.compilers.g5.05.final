
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftBITWISE_ORleftBITWISE_XORleftBITWISE_ANDleftEQNEleftLTLEGTGEleftLSHIFTRSHIFTleftPLUSMINUSleftTIMESDIVIDEMODULOrightNOTBITWISE_NOTADDRESSDEREFERENCEleftINCREMENTDECREMENTleftDOTARROWleftLPARENRPARENLBRACKETRBRACKETADDRESS AND ARROW ASSIGN AUTO BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BREAK CASE CHAR CHAR_LITERAL COLON COMMA CONST CONTINUE DECREMENT DEFAULT DEREFERENCE DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE ELSE EQ EXTERN FLOAT FLOAT_NUM FOR FREE GE GT IDENTIFIER IF INCREMENT INT LBRACE LBRACKET LE LONG LPAREN LSHIFT LT MALLOC MINUS MINUS_ASSIGN MODULO NE NOT NUMBER OR PLUS PLUS_ASSIGN PRINTF QUESTION RBRACE RBRACKET REGISTER RETURN RPAREN RSHIFT SCANF SEMICOLON SHORT SIGNED SIZEOF STATIC STRING_LITERAL SWITCH TIMES TIMES_ASSIGN UNSIGNED VOID VOLATILE WHILEprogram : translation_unittranslation_unit : external_declaration\n                           | translation_unit external_declarationexternal_declaration : function_definition\n                               | declarationfunction_definition : type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement\n                              | type_specifier IDENTIFIER LPAREN RPAREN compound_statementparameter_list : parameter_declaration\n                         | parameter_list COMMA parameter_declarationparameter_declaration : type_specifier IDENTIFIER\n                                | type_specifiertype_specifier : VOID\n                         | CHAR\n                         | SHORT\n                         | INT\n                         | LONG\n                         | FLOAT\n                         | DOUBLE\n                         | SIGNED\n                         | UNSIGNED\n                         | BOOL\n                         | signed_type\n                         | unsigned_typesigned_type : SIGNED CHAR\n                      | SIGNED SHORT\n                      | SIGNED INT\n                      | SIGNED LONGunsigned_type : UNSIGNED CHAR\n                        | UNSIGNED SHORT  \n                        | UNSIGNED INT\n                        | UNSIGNED LONGdeclaration : type_specifier init_declarator_list SEMICOLONinit_declarator_list : init_declarator\n                               | init_declarator_list COMMA init_declaratorinit_declarator : declarator\n                          | declarator ASSIGN initializerdeclarator : IDENTIFIER\n                     | TIMES declarator\n                     | declarator LBRACKET RBRACKET\n                     | declarator LBRACKET constant_expression RBRACKETinitializer : assignment_expression\n                      | LBRACE initializer_list RBRACE\n                      | LBRACE initializer_list COMMA RBRACEinitializer_list : initializer\n                           | initializer_list COMMA initializerstatement : compound_statement\n                    | expression_statement\n                    | selection_statement\n                    | iteration_statement\n                    | jump_statement\n                    | declarationcompound_statement : LBRACE RBRACE\n                             | LBRACE statement_list RBRACEstatement_list : statement\n                         | statement_list statementexpression_statement : SEMICOLON\n                               | expression SEMICOLONselection_statement : IF LPAREN expression RPAREN statement\n                              | IF LPAREN expression RPAREN statement ELSE statement\n                              | SWITCH LPAREN expression RPAREN statementiteration_statement : WHILE LPAREN expression RPAREN statement\n                              | FOR LPAREN expression_statement expression_statement RPAREN statement\n                              | FOR LPAREN expression_statement expression_statement expression RPAREN statement\n                              | DO statement WHILE LPAREN expression RPAREN SEMICOLONjump_statement : BREAK SEMICOLON\n                         | CONTINUE SEMICOLON\n                         | RETURN SEMICOLON\n                         | RETURN expression SEMICOLONexpression : assignment_expression\n                     | expression COMMA assignment_expressionassignment_expression : conditional_expression\n                                | unary_expression assignment_operator assignment_expressionassignment_operator : ASSIGN\n                              | TIMES_ASSIGN\n                              | DIVIDE_ASSIGN\n                              | PLUS_ASSIGN\n                              | MINUS_ASSIGNconditional_expression : logical_or_expression\n                                 | logical_or_expression QUESTION expression COLON conditional_expressionconstant_expression : conditional_expressionlogical_or_expression : logical_and_expression\n                                | logical_or_expression OR logical_and_expressionlogical_and_expression : bitwise_or_expression\n                                 | logical_and_expression AND bitwise_or_expressionbitwise_or_expression : bitwise_xor_expression\n                                | bitwise_or_expression BITWISE_OR bitwise_xor_expressionbitwise_xor_expression : bitwise_and_expression\n                                 | bitwise_xor_expression BITWISE_XOR bitwise_and_expressionbitwise_and_expression : equality_expression\n                                 | bitwise_and_expression BITWISE_AND equality_expressionequality_expression : relational_expression\n                              | equality_expression EQ relational_expression\n                              | equality_expression NE relational_expressionrelational_expression : shift_expression\n                                | relational_expression LT shift_expression\n                                | relational_expression GT shift_expression\n                                | relational_expression LE shift_expression\n                                | relational_expression GE shift_expressionshift_expression : additive_expression\n                           | shift_expression LSHIFT additive_expression\n                           | shift_expression RSHIFT additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : cast_expression\n                                    | multiplicative_expression TIMES cast_expression\n                                    | multiplicative_expression DIVIDE cast_expression\n                                    | multiplicative_expression MODULO cast_expressioncast_expression : unary_expression\n                          | LPAREN type_specifier RPAREN cast_expressionunary_expression : postfix_expression\n                           | INCREMENT unary_expression\n                           | DECREMENT unary_expression\n                           | unary_operator cast_expression\n                           | SIZEOF unary_expression\n                           | SIZEOF LPAREN type_specifier RPARENunary_operator : BITWISE_AND\n                         | TIMES\n                         | PLUS\n                         | MINUS\n                         | BITWISE_NOT\n                         | NOTpostfix_expression : primary_expression\n                             | postfix_expression LBRACKET expression RBRACKET\n                             | postfix_expression LPAREN RPAREN\n                             | postfix_expression LPAREN argument_expression_list RPAREN\n                             | postfix_expression DOT IDENTIFIER\n                             | postfix_expression ARROW IDENTIFIER\n                             | postfix_expression INCREMENT\n                             | postfix_expression DECREMENTprimary_expression : IDENTIFIER\n                             | constant\n                             | STRING_LITERAL\n                             | LPAREN expression RPARENargument_expression_list : assignment_expression\n                                   | argument_expression_list COMMA assignment_expressionconstant : NUMBER\n                   | FLOAT_NUM\n                   | CHAR_LITERAL'
    
_lr_action_items = {'VOID':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[7,7,-2,-4,-5,-3,7,-32,7,7,7,-7,7,7,-6,-52,7,-54,-46,-47,-48,-49,-50,-51,-56,7,-53,-55,-57,-65,-66,-67,-68,7,7,7,-58,-60,-61,7,7,-62,7,-59,-63,-64,]),'CHAR':([0,2,3,4,5,14,15,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[8,8,-2,-4,-5,25,29,-3,8,-32,8,8,8,-7,8,8,-6,-52,8,-54,-46,-47,-48,-49,-50,-51,-56,8,-53,-55,-57,-65,-66,-67,-68,8,8,8,-58,-60,-61,8,8,-62,8,-59,-63,-64,]),'SHORT':([0,2,3,4,5,14,15,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[9,9,-2,-4,-5,26,30,-3,9,-32,9,9,9,-7,9,9,-6,-52,9,-54,-46,-47,-48,-49,-50,-51,-56,9,-53,-55,-57,-65,-66,-67,-68,9,9,9,-58,-60,-61,9,9,-62,9,-59,-63,-64,]),'INT':([0,2,3,4,5,14,15,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[10,10,-2,-4,-5,27,31,-3,10,-32,10,10,10,-7,10,10,-6,-52,10,-54,-46,-47,-48,-49,-50,-51,-56,10,-53,-55,-57,-65,-66,-67,-68,10,10,10,-58,-60,-61,10,10,-62,10,-59,-63,-64,]),'LONG':([0,2,3,4,5,14,15,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[11,11,-2,-4,-5,28,32,-3,11,-32,11,11,11,-7,11,11,-6,-52,11,-54,-46,-47,-48,-49,-50,-51,-56,11,-53,-55,-57,-65,-66,-67,-68,11,11,11,-58,-60,-61,11,11,-62,11,-59,-63,-64,]),'FLOAT':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[12,12,-2,-4,-5,-3,12,-32,12,12,12,-7,12,12,-6,-52,12,-54,-46,-47,-48,-49,-50,-51,-56,12,-53,-55,-57,-65,-66,-67,-68,12,12,12,-58,-60,-61,12,12,-62,12,-59,-63,-64,]),'DOUBLE':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[13,13,-2,-4,-5,-3,13,-32,13,13,13,-7,13,13,-6,-52,13,-54,-46,-47,-48,-49,-50,-51,-56,13,-53,-55,-57,-65,-66,-67,-68,13,13,13,-58,-60,-61,13,13,-62,13,-59,-63,-64,]),'SIGNED':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[14,14,-2,-4,-5,-3,14,-32,14,14,14,-7,14,14,-6,-52,14,-54,-46,-47,-48,-49,-50,-51,-56,14,-53,-55,-57,-65,-66,-67,-68,14,14,14,-58,-60,-61,14,14,-62,14,-59,-63,-64,]),'UNSIGNED':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[15,15,-2,-4,-5,-3,15,-32,15,15,15,-7,15,15,-6,-52,15,-54,-46,-47,-48,-49,-50,-51,-56,15,-53,-55,-57,-65,-66,-67,-68,15,15,15,-58,-60,-61,15,15,-62,15,-59,-63,-64,]),'BOOL':([0,2,3,4,5,19,33,34,57,84,87,88,89,111,133,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[16,16,-2,-4,-5,-3,16,-32,16,16,16,-7,16,16,-6,-52,16,-54,-46,-47,-48,-49,-50,-51,-56,16,-53,-55,-57,-65,-66,-67,-68,16,16,16,-58,-60,-61,16,16,-62,16,-59,-63,-64,]),'$end':([1,2,3,4,5,19,34,88,133,135,187,],[0,-1,-2,-4,-5,-3,-32,-7,-6,-52,-53,]),'IDENTIFIER':([6,7,8,9,10,11,12,13,14,15,16,17,18,24,25,26,27,28,29,30,31,32,34,35,36,37,40,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,102,103,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,154,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[20,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,39,-24,-25,-26,-27,-28,-29,-30,-31,-32,39,60,60,85,60,60,60,60,60,60,-117,-118,-119,-120,-121,-122,60,60,60,-73,-74,-75,-76,-77,60,60,60,60,164,165,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-52,60,-54,-46,-47,-48,-49,-50,-51,-56,60,60,39,60,60,60,-53,-55,-57,60,60,60,60,-65,-66,-67,60,60,60,-68,60,60,60,60,60,-58,-60,-61,60,60,-62,60,-59,-63,-64,]),'TIMES':([6,7,8,9,10,11,12,13,14,15,16,17,18,24,25,26,27,28,29,30,31,32,34,35,36,37,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,79,83,84,89,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,154,156,161,164,165,167,168,169,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,201,202,203,204,205,207,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[24,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,24,-24,-25,-26,-27,-28,-29,-30,-31,-32,24,62,62,62,-109,-111,62,62,62,-105,62,62,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,129,-109,62,62,62,-73,-74,-75,-76,-77,62,62,62,62,-129,-130,-112,62,-113,-114,-115,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-52,62,-54,-46,-47,-48,-49,-50,-51,-56,62,62,24,62,-125,-127,-128,-134,62,62,129,129,-106,-107,-108,-53,-55,-57,62,62,62,62,-65,-66,-67,62,-124,-126,62,-116,-110,62,-68,62,62,62,62,62,-58,-60,-61,62,62,-62,62,-59,-63,-64,]),'RPAREN':([7,8,9,10,11,12,13,14,15,16,17,18,25,26,27,28,29,30,31,32,33,40,41,43,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,101,104,105,106,108,109,110,112,113,114,134,144,157,159,161,162,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,202,203,205,206,207,208,209,210,214,215,219,225,226,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,42,-11,86,-8,-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-10,161,-129,-130,-112,-113,-114,-115,167,169,-69,-9,-56,-72,-82,-125,203,-135,-127,-128,205,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-57,-124,-126,-116,-70,-110,216,217,218,-79,-136,224,229,230,]),'COMMA':([7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,25,26,27,28,29,30,31,32,38,39,40,41,43,44,45,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,85,90,91,104,105,106,108,109,110,112,114,132,134,145,155,157,158,159,160,161,162,163,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,198,199,200,202,203,205,206,207,208,209,210,214,215,225,226,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-37,35,-33,-35,-24,-25,-26,-27,-28,-29,-30,-31,-38,-37,-11,87,-8,-34,-36,-41,-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-39,-109,-10,156,-44,-129,-130,-112,-113,-114,-115,168,-69,-40,-9,168,-42,-72,168,-82,168,-125,204,-135,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,168,-43,-45,-124,-126,-116,-70,-110,168,168,168,-79,-136,168,168,]),'LPAREN':([20,34,36,37,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,84,89,92,93,94,95,96,97,98,99,100,101,104,105,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,153,156,161,164,165,167,168,169,187,188,189,190,191,192,193,195,196,197,201,202,203,204,211,212,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[33,-32,57,84,57,101,107,107,84,111,57,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,57,57,57,-73,-74,-75,-76,-77,57,84,57,57,-129,-130,57,57,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-52,57,-54,-46,-47,-48,-49,-50,-51,-56,190,191,192,193,57,57,57,-125,-127,-128,-134,57,84,-53,-55,-57,57,57,57,57,-65,-66,-67,84,-124,-126,57,57,220,-68,57,57,57,57,57,-58,-60,-61,57,57,-62,57,-59,-63,-64,]),'ASSIGN':([20,23,38,39,49,51,59,60,68,69,71,72,73,80,83,104,105,106,108,109,110,132,161,164,165,167,202,203,205,207,],[-37,36,-38,-37,93,-111,-123,-131,-132,-133,-137,-138,-139,-39,-109,-129,-130,-112,-113,-114,-115,-40,-125,-127,-128,-134,-124,-126,-116,-110,]),'LBRACKET':([20,23,38,39,51,59,60,68,69,71,72,73,80,104,105,132,161,164,165,167,202,203,],[-37,37,37,-37,100,-123,-131,-132,-133,-137,-138,-139,-39,-129,-130,-40,-125,-127,-128,-134,-124,-126,]),'SEMICOLON':([20,21,22,23,34,38,39,44,45,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,89,104,105,106,108,109,110,114,132,135,136,137,138,139,140,141,142,143,144,145,150,151,152,153,155,157,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,193,195,196,197,198,199,202,203,205,206,207,211,213,214,216,217,218,221,222,223,224,227,228,229,230,231,232,233,],[-37,34,-33,-35,-32,-38,-37,-34,-36,-41,-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-39,-109,144,-129,-130,-112,-113,-114,-115,-69,-40,-52,144,-54,-46,-47,-48,-49,-50,-51,-56,189,144,195,196,197,-42,-72,-82,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-53,-55,-57,144,-65,-66,-67,213,-43,-124,-126,-116,-70,-110,144,-68,-79,144,144,144,-58,-60,-61,144,144,-62,144,233,-59,-63,-64,]),'RBRACE':([34,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,89,90,91,104,105,106,108,109,110,135,136,137,138,139,140,141,142,143,144,155,156,157,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,195,196,197,199,200,202,203,205,207,213,214,221,222,223,228,231,232,233,],[-32,-41,-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,135,155,-44,-129,-130,-112,-113,-114,-115,-52,187,-54,-46,-47,-48,-49,-50,-51,-56,-42,199,-72,-82,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-53,-55,-57,-65,-66,-67,-43,-45,-124,-126,-116,-110,-68,-79,-58,-60,-61,-62,-59,-63,-64,]),'LBRACE':([34,36,42,47,86,89,135,136,137,138,139,140,141,142,143,144,150,156,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,47,89,47,89,89,-52,89,-54,-46,-47,-48,-49,-50,-51,-56,89,47,-53,-55,-57,-65,-66,-67,-68,89,89,89,-58,-60,-61,89,89,-62,89,-59,-63,-64,]),'IF':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,146,-52,146,-54,-46,-47,-48,-49,-50,-51,-56,146,-53,-55,-57,-65,-66,-67,-68,146,146,146,-58,-60,-61,146,146,-62,146,-59,-63,-64,]),'SWITCH':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,147,-52,147,-54,-46,-47,-48,-49,-50,-51,-56,147,-53,-55,-57,-65,-66,-67,-68,147,147,147,-58,-60,-61,147,147,-62,147,-59,-63,-64,]),'WHILE':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,194,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,148,-52,148,-54,-46,-47,-48,-49,-50,-51,-56,148,-53,-55,-57,212,-65,-66,-67,-68,148,148,148,-58,-60,-61,148,148,-62,148,-59,-63,-64,]),'FOR':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,149,-52,149,-54,-46,-47,-48,-49,-50,-51,-56,149,-53,-55,-57,-65,-66,-67,-68,149,149,149,-58,-60,-61,149,149,-62,149,-59,-63,-64,]),'DO':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,150,-52,150,-54,-46,-47,-48,-49,-50,-51,-56,150,-53,-55,-57,-65,-66,-67,-68,150,150,150,-58,-60,-61,150,150,-62,150,-59,-63,-64,]),'BREAK':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,151,-52,151,-54,-46,-47,-48,-49,-50,-51,-56,151,-53,-55,-57,-65,-66,-67,-68,151,151,151,-58,-60,-61,151,151,-62,151,-59,-63,-64,]),'CONTINUE':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,152,-52,152,-54,-46,-47,-48,-49,-50,-51,-56,152,-53,-55,-57,-65,-66,-67,-68,152,152,152,-58,-60,-61,152,152,-62,152,-59,-63,-64,]),'RETURN':([34,89,135,136,137,138,139,140,141,142,143,144,150,187,188,189,195,196,197,213,216,217,218,221,222,223,224,227,228,229,231,232,233,],[-32,153,-52,153,-54,-46,-47,-48,-49,-50,-51,-56,153,-53,-55,-57,-65,-66,-67,-68,153,153,153,-58,-60,-61,153,153,-62,153,-59,-63,-64,]),'INCREMENT':([34,36,37,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,84,89,92,93,94,95,96,97,98,99,100,101,104,105,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,161,164,165,167,168,169,187,188,189,190,191,192,193,195,196,197,201,202,203,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,52,52,52,104,52,52,52,52,52,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,52,52,52,-73,-74,-75,-76,-77,52,52,52,52,-129,-130,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-52,52,-54,-46,-47,-48,-49,-50,-51,-56,52,52,52,-125,-127,-128,-134,52,52,-53,-55,-57,52,52,52,52,-65,-66,-67,52,-124,-126,52,52,-68,52,52,52,52,52,-58,-60,-61,52,52,-62,52,-59,-63,-64,]),'DECREMENT':([34,36,37,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,84,89,92,93,94,95,96,97,98,99,100,101,104,105,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,161,164,165,167,168,169,187,188,189,190,191,192,193,195,196,197,201,202,203,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,53,53,53,105,53,53,53,53,53,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,53,53,53,-73,-74,-75,-76,-77,53,53,53,53,-129,-130,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-52,53,-54,-46,-47,-48,-49,-50,-51,-56,53,53,53,-125,-127,-128,-134,53,53,-53,-55,-57,53,53,53,53,-65,-66,-67,53,-124,-126,53,53,-68,53,53,53,53,53,-58,-60,-61,53,53,-62,53,-59,-63,-64,]),'SIZEOF':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,56,56,56,56,56,56,56,56,-117,-118,-119,-120,-121,-122,56,56,56,-73,-74,-75,-76,-77,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-52,56,-54,-46,-47,-48,-49,-50,-51,-56,56,56,56,56,56,-53,-55,-57,56,56,56,56,-65,-66,-67,56,56,56,-68,56,56,56,56,56,-58,-60,-61,56,56,-62,56,-59,-63,-64,]),'BITWISE_AND':([34,36,37,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,74,75,76,77,78,79,83,84,89,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,161,164,165,167,168,169,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,201,202,203,204,205,207,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,61,61,61,-109,-111,61,61,61,-105,61,61,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,118,-89,-91,-94,-99,-102,-109,61,61,61,-73,-74,-75,-76,-77,61,61,61,61,-129,-130,-112,61,-113,-114,-115,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-52,61,-54,-46,-47,-48,-49,-50,-51,-56,61,61,61,-125,-127,-128,-134,61,61,118,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-53,-55,-57,61,61,61,61,-65,-66,-67,61,-124,-126,61,-116,-110,61,-68,61,61,61,61,61,-58,-60,-61,61,61,-62,61,-59,-63,-64,]),'PLUS':([34,36,37,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,78,79,83,84,89,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,161,164,165,167,168,169,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,201,202,203,204,205,207,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,63,63,63,-109,-111,63,63,63,-105,63,63,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,127,-102,-109,63,63,63,-73,-74,-75,-76,-77,63,63,63,63,-129,-130,-112,63,-113,-114,-115,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-52,63,-54,-46,-47,-48,-49,-50,-51,-56,63,63,63,-125,-127,-128,-134,63,63,127,127,-103,-104,-106,-107,-108,-53,-55,-57,63,63,63,63,-65,-66,-67,63,-124,-126,63,-116,-110,63,-68,63,63,63,63,63,-58,-60,-61,63,63,-62,63,-59,-63,-64,]),'MINUS':([34,36,37,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,71,72,73,78,79,83,84,89,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,161,164,165,167,168,169,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,201,202,203,204,205,207,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,64,64,64,-109,-111,64,64,64,-105,64,64,-123,-131,-117,-118,-119,-120,-121,-122,-132,-133,-137,-138,-139,128,-102,-109,64,64,64,-73,-74,-75,-76,-77,64,64,64,64,-129,-130,-112,64,-113,-114,-115,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-52,64,-54,-46,-47,-48,-49,-50,-51,-56,64,64,64,-125,-127,-128,-134,64,64,128,128,-103,-104,-106,-107,-108,-53,-55,-57,64,64,64,64,-65,-66,-67,64,-124,-126,64,-116,-110,64,-68,64,64,64,64,64,-58,-60,-61,64,64,-62,64,-59,-63,-64,]),'BITWISE_NOT':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,65,65,65,65,65,65,65,65,-117,-118,-119,-120,-121,-122,65,65,65,-73,-74,-75,-76,-77,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-52,65,-54,-46,-47,-48,-49,-50,-51,-56,65,65,65,65,65,-53,-55,-57,65,65,65,65,-65,-66,-67,65,65,65,-68,65,65,65,65,65,-58,-60,-61,65,65,-62,65,-59,-63,-64,]),'NOT':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,66,66,66,66,66,66,66,66,-117,-118,-119,-120,-121,-122,66,66,66,-73,-74,-75,-76,-77,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-52,66,-54,-46,-47,-48,-49,-50,-51,-56,66,66,66,66,66,-53,-55,-57,66,66,66,66,-65,-66,-67,66,66,66,-68,66,66,66,66,66,-58,-60,-61,66,66,-62,66,-59,-63,-64,]),'STRING_LITERAL':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,69,69,69,69,69,69,69,69,-117,-118,-119,-120,-121,-122,69,69,69,-73,-74,-75,-76,-77,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-52,69,-54,-46,-47,-48,-49,-50,-51,-56,69,69,69,69,69,-53,-55,-57,69,69,69,69,-65,-66,-67,69,69,69,-68,69,69,69,69,69,-58,-60,-61,69,69,-62,69,-59,-63,-64,]),'NUMBER':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,71,71,71,71,71,71,71,71,-117,-118,-119,-120,-121,-122,71,71,71,-73,-74,-75,-76,-77,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-52,71,-54,-46,-47,-48,-49,-50,-51,-56,71,71,71,71,71,-53,-55,-57,71,71,71,71,-65,-66,-67,71,71,71,-68,71,71,71,71,71,-58,-60,-61,71,71,-62,71,-59,-63,-64,]),'FLOAT_NUM':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,72,72,72,72,72,72,72,72,-117,-118,-119,-120,-121,-122,72,72,72,-73,-74,-75,-76,-77,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-52,72,-54,-46,-47,-48,-49,-50,-51,-56,72,72,72,72,72,-53,-55,-57,72,72,72,72,-65,-66,-67,72,72,72,-68,72,72,72,72,72,-58,-60,-61,72,72,-62,72,-59,-63,-64,]),'CHAR_LITERAL':([34,36,37,47,52,53,54,56,57,61,62,63,64,65,66,84,89,92,93,94,95,96,97,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,150,153,156,168,169,187,188,189,190,191,192,193,195,196,197,201,204,211,213,216,217,218,219,220,221,222,223,224,227,228,229,231,232,233,],[-32,73,73,73,73,73,73,73,73,-117,-118,-119,-120,-121,-122,73,73,73,-73,-74,-75,-76,-77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-52,73,-54,-46,-47,-48,-49,-50,-51,-56,73,73,73,73,73,-53,-55,-57,73,73,73,73,-65,-66,-67,73,73,73,-68,73,73,73,73,73,-58,-60,-61,73,73,-62,73,-59,-63,-64,]),'ELSE':([34,135,138,139,140,141,142,143,144,187,189,195,196,197,213,221,222,223,228,231,232,233,],[-32,-52,-46,-47,-48,-49,-50,-51,-56,-53,-57,-65,-66,-67,-68,-58,-60,-61,-62,-59,-63,-64,]),'RBRACKET':([37,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,104,105,106,108,109,110,114,157,159,160,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,206,207,214,],[80,-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,132,-80,-109,-129,-130,-112,-113,-114,-115,-69,-72,-82,202,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-70,-110,-79,]),'COLON':([48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,114,157,158,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,206,207,214,],[-71,-109,-78,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-69,-72,201,-82,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-70,-110,-79,]),'DIVIDE':([49,51,55,59,60,68,69,71,72,73,79,83,104,105,106,108,109,110,161,164,165,167,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,130,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,130,130,-106,-107,-108,-124,-126,-116,-110,]),'MODULO':([49,51,55,59,60,68,69,71,72,73,79,83,104,105,106,108,109,110,161,164,165,167,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,131,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,131,131,-106,-107,-108,-124,-126,-116,-110,]),'LSHIFT':([49,51,55,59,60,68,69,71,72,73,77,78,79,83,104,105,106,108,109,110,161,164,165,167,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,125,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,125,125,125,125,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'RSHIFT':([49,51,55,59,60,68,69,71,72,73,77,78,79,83,104,105,106,108,109,110,161,164,165,167,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,126,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,126,126,126,126,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'LT':([49,51,55,59,60,68,69,71,72,73,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,121,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,121,121,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'GT':([49,51,55,59,60,68,69,71,72,73,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,122,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,122,122,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'LE':([49,51,55,59,60,68,69,71,72,73,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,123,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,123,123,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'GE':([49,51,55,59,60,68,69,71,72,73,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,124,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,124,124,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'EQ':([49,51,55,59,60,68,69,71,72,73,75,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,119,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,119,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'NE':([49,51,55,59,60,68,69,71,72,73,75,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,-137,-138,-139,120,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,120,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'BITWISE_XOR':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,-132,-133,117,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,117,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'BITWISE_OR':([49,51,55,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,-123,-131,116,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,116,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'AND':([49,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,-111,-105,115,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,115,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'QUESTION':([49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,98,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-82,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'OR':([49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,83,104,105,106,108,109,110,159,161,164,165,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,202,203,205,207,],[-109,99,-111,-105,-81,-123,-131,-83,-132,-133,-85,-137,-138,-139,-87,-89,-91,-94,-99,-102,-109,-129,-130,-112,-113,-114,-115,-82,-125,-127,-128,-134,-84,-86,-88,-90,-92,-93,-95,-96,-97,-98,-100,-101,-103,-104,-106,-107,-108,-124,-126,-116,-110,]),'TIMES_ASSIGN':([49,51,59,60,68,69,71,72,73,83,104,105,106,108,109,110,161,164,165,167,202,203,205,207,],[94,-111,-123,-131,-132,-133,-137,-138,-139,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,-124,-126,-116,-110,]),'DIVIDE_ASSIGN':([49,51,59,60,68,69,71,72,73,83,104,105,106,108,109,110,161,164,165,167,202,203,205,207,],[95,-111,-123,-131,-132,-133,-137,-138,-139,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,-124,-126,-116,-110,]),'PLUS_ASSIGN':([49,51,59,60,68,69,71,72,73,83,104,105,106,108,109,110,161,164,165,167,202,203,205,207,],[96,-111,-123,-131,-132,-133,-137,-138,-139,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,-124,-126,-116,-110,]),'MINUS_ASSIGN':([49,51,59,60,68,69,71,72,73,83,104,105,106,108,109,110,161,164,165,167,202,203,205,207,],[97,-111,-123,-131,-132,-133,-137,-138,-139,-109,-129,-130,-112,-113,-114,-115,-125,-127,-128,-134,-124,-126,-116,-110,]),'DOT':([51,59,60,68,69,71,72,73,104,105,161,164,165,167,202,203,],[102,-123,-131,-132,-133,-137,-138,-139,-129,-130,-125,-127,-128,-134,-124,-126,]),'ARROW':([51,59,60,68,69,71,72,73,104,105,161,164,165,167,202,203,],[103,-123,-131,-132,-133,-137,-138,-139,-129,-130,-125,-127,-128,-134,-124,-126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,89,136,150,216,217,218,224,227,229,],[5,5,143,143,143,143,143,143,143,143,143,]),'type_specifier':([0,2,33,57,84,87,89,111,136,150,216,217,218,224,227,229,],[6,6,40,113,113,40,154,166,154,154,154,154,154,154,154,154,]),'signed_type':([0,2,33,57,84,87,89,111,136,150,216,217,218,224,227,229,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'unsigned_type':([0,2,33,57,84,87,89,111,136,150,216,217,218,224,227,229,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'init_declarator_list':([6,154,],[21,21,]),'init_declarator':([6,35,154,],[22,44,22,]),'declarator':([6,24,35,154,],[23,38,23,23,]),'parameter_list':([33,],[41,]),'parameter_declaration':([33,87,],[43,134,]),'initializer':([36,47,156,],[45,91,200,]),'assignment_expression':([36,47,57,84,89,92,98,100,101,107,111,136,150,153,156,168,190,191,192,193,204,211,216,217,218,219,220,224,227,229,],[46,46,114,114,114,157,114,114,163,114,114,114,114,114,46,206,114,114,114,114,215,114,114,114,114,114,114,114,114,114,]),'conditional_expression':([36,37,47,57,84,89,92,98,100,101,107,111,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[48,82,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,214,48,48,48,48,48,48,48,48,48,48,]),'unary_expression':([36,37,47,52,53,54,56,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[49,83,49,106,108,83,110,49,49,49,49,49,83,49,49,49,49,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,49,49,49,49,49,83,49,49,49,49,83,49,49,49,49,49,49,49,49,49,49,]),'logical_or_expression':([36,37,47,57,84,89,92,98,100,101,107,111,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'postfix_expression':([36,37,47,52,53,54,56,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_operator':([36,37,47,52,53,54,56,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'cast_expression':([36,37,47,54,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[55,55,55,109,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,184,185,186,55,55,55,55,55,207,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'logical_and_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[58,58,58,58,58,58,58,58,159,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'primary_expression':([36,37,47,52,53,54,56,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'bitwise_or_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[67,67,67,67,67,67,67,67,67,67,67,67,67,170,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'constant':([36,37,47,52,53,54,56,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,150,153,156,168,169,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'bitwise_xor_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,171,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'bitwise_and_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,172,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'equality_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,118,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,173,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'relational_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,174,175,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'shift_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,176,177,178,179,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'additive_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,180,181,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'multiplicative_expression':([36,37,47,57,84,89,92,98,99,100,101,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,150,153,156,168,190,191,192,193,201,204,211,216,217,218,219,220,224,227,229,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,182,183,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'constant_expression':([37,],[81,]),'compound_statement':([42,86,89,136,150,216,217,218,224,227,229,],[88,133,138,138,138,138,138,138,138,138,138,]),'initializer_list':([47,],[90,]),'assignment_operator':([49,],[92,]),'expression':([57,84,89,98,100,107,111,136,150,153,190,191,192,193,211,216,217,218,219,220,224,227,229,],[112,112,145,158,160,112,112,145,145,198,208,209,210,145,145,145,145,145,225,226,145,145,145,]),'statement_list':([89,],[136,]),'statement':([89,136,150,216,217,218,224,227,229,],[137,188,194,221,222,223,228,231,232,]),'expression_statement':([89,136,150,193,211,216,217,218,224,227,229,],[139,139,139,211,219,139,139,139,139,139,139,]),'selection_statement':([89,136,150,216,217,218,224,227,229,],[140,140,140,140,140,140,140,140,140,]),'iteration_statement':([89,136,150,216,217,218,224,227,229,],[141,141,141,141,141,141,141,141,141,]),'jump_statement':([89,136,150,216,217,218,224,227,229,],[142,142,142,142,142,142,142,142,142,]),'argument_expression_list':([101,],[162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','parser.py',33),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','parser.py',37),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','parser.py',38),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser.py',46),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser.py',47),
  ('function_definition -> type_specifier IDENTIFIER LPAREN parameter_list RPAREN compound_statement','function_definition',6,'p_function_definition','parser.py',52),
  ('function_definition -> type_specifier IDENTIFIER LPAREN RPAREN compound_statement','function_definition',5,'p_function_definition','parser.py',53),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',60),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',61),
  ('parameter_declaration -> type_specifier IDENTIFIER','parameter_declaration',2,'p_parameter_declaration','parser.py',69),
  ('parameter_declaration -> type_specifier','parameter_declaration',1,'p_parameter_declaration','parser.py',70),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',78),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',79),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','parser.py',80),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',81),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','parser.py',82),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',83),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',84),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','parser.py',85),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','parser.py',86),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',87),
  ('type_specifier -> signed_type','type_specifier',1,'p_type_specifier','parser.py',88),
  ('type_specifier -> unsigned_type','type_specifier',1,'p_type_specifier','parser.py',89),
  ('signed_type -> SIGNED CHAR','signed_type',2,'p_signed_type','parser.py',93),
  ('signed_type -> SIGNED SHORT','signed_type',2,'p_signed_type','parser.py',94),
  ('signed_type -> SIGNED INT','signed_type',2,'p_signed_type','parser.py',95),
  ('signed_type -> SIGNED LONG','signed_type',2,'p_signed_type','parser.py',96),
  ('unsigned_type -> UNSIGNED CHAR','unsigned_type',2,'p_unsigned_type','parser.py',100),
  ('unsigned_type -> UNSIGNED SHORT','unsigned_type',2,'p_unsigned_type','parser.py',101),
  ('unsigned_type -> UNSIGNED INT','unsigned_type',2,'p_unsigned_type','parser.py',102),
  ('unsigned_type -> UNSIGNED LONG','unsigned_type',2,'p_unsigned_type','parser.py',103),
  ('declaration -> type_specifier init_declarator_list SEMICOLON','declaration',3,'p_declaration','parser.py',108),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',112),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',113),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',121),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',122),
  ('declarator -> IDENTIFIER','declarator',1,'p_declarator','parser.py',129),
  ('declarator -> TIMES declarator','declarator',2,'p_declarator','parser.py',130),
  ('declarator -> declarator LBRACKET RBRACKET','declarator',3,'p_declarator','parser.py',131),
  ('declarator -> declarator LBRACKET constant_expression RBRACKET','declarator',4,'p_declarator','parser.py',132),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',143),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','parser.py',144),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','parser.py',145),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',152),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',153),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',162),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',163),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',164),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',165),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',166),
  ('statement -> declaration','statement',1,'p_statement','parser.py',167),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','parser.py',171),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',172),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',179),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',180),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',188),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',189),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',197),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',198),
  ('selection_statement -> SWITCH LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',199),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',210),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement','iteration_statement',6,'p_iteration_statement','parser.py',211),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement','parser.py',212),
  ('iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON','iteration_statement',7,'p_iteration_statement','parser.py',213),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',226),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',227),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',228),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement','parser.py',229),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',241),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',242),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','parser.py',249),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',250),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',257),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',258),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',259),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',260),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',261),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','parser.py',265),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','parser.py',266),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','parser.py',273),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','parser.py',277),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','parser.py',278),
  ('logical_and_expression -> bitwise_or_expression','logical_and_expression',1,'p_logical_and_expression','parser.py',285),
  ('logical_and_expression -> logical_and_expression AND bitwise_or_expression','logical_and_expression',3,'p_logical_and_expression','parser.py',286),
  ('bitwise_or_expression -> bitwise_xor_expression','bitwise_or_expression',1,'p_bitwise_or_expression','parser.py',293),
  ('bitwise_or_expression -> bitwise_or_expression BITWISE_OR bitwise_xor_expression','bitwise_or_expression',3,'p_bitwise_or_expression','parser.py',294),
  ('bitwise_xor_expression -> bitwise_and_expression','bitwise_xor_expression',1,'p_bitwise_xor_expression','parser.py',301),
  ('bitwise_xor_expression -> bitwise_xor_expression BITWISE_XOR bitwise_and_expression','bitwise_xor_expression',3,'p_bitwise_xor_expression','parser.py',302),
  ('bitwise_and_expression -> equality_expression','bitwise_and_expression',1,'p_bitwise_and_expression','parser.py',309),
  ('bitwise_and_expression -> bitwise_and_expression BITWISE_AND equality_expression','bitwise_and_expression',3,'p_bitwise_and_expression','parser.py',310),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',317),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',318),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','parser.py',319),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','parser.py',326),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression','parser.py',327),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression','parser.py',328),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression','parser.py',329),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression','parser.py',330),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','parser.py',337),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','parser.py',338),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','parser.py',339),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',346),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',347),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',348),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',355),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',356),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',357),
  ('multiplicative_expression -> multiplicative_expression MODULO cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',358),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',365),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',366),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',373),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','parser.py',374),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','parser.py',375),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',376),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','parser.py',377),
  ('unary_expression -> SIZEOF LPAREN type_specifier RPAREN','unary_expression',4,'p_unary_expression','parser.py',378),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','parser.py',392),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',393),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',394),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',395),
  ('unary_operator -> BITWISE_NOT','unary_operator',1,'p_unary_operator','parser.py',396),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',397),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',401),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','parser.py',402),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression','parser.py',403),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',404),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',405),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',406),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','parser.py',407),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','parser.py',408),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',426),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','parser.py',427),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',428),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',429),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','parser.py',441),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','parser.py',442),
  ('constant -> NUMBER','constant',1,'p_constant','parser.py',450),
  ('constant -> FLOAT_NUM','constant',1,'p_constant','parser.py',451),
  ('constant -> CHAR_LITERAL','constant',1,'p_constant','parser.py',452),
]
